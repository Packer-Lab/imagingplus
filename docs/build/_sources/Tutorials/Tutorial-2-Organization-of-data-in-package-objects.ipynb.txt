{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6377fc70",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Tutorial 2 - Data organization inside Imaging+"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8ff7c0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "imported imagingplus successfully\n",
      "\tversion: 0.2-beta\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import imagingplus as ip"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3b26771",
   "metadata": {},
   "source": [
    "**This notebook demonstrates the basics of how data is organized inside of a trial object.**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f951652b",
   "metadata": {},
   "source": [
    "## Importing data analysis objects\n",
    "The first step to begin using the data analysis objects is to import the previously created objects. In general, it is advised to import th high-level `Experiment` object first, and then use the `.load_trial` method to load an individual `-Trial` object.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "de7801b4",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "|- Loaded imagingplus.Experiment object (expID: RL109)109_analysis.pkl ... \n",
      "\n",
      "imagingplus Experiment object (last saved: Sun Oct 23 13:04:11 2022), expID: RL109\n",
      "file path: /mnt/qnap_share/Data/imagingplus-example/RL109_analysis.pkl\n",
      "\n",
      "trials in Experiment object:\n",
      "\tt-005: awake spont. 2p imaging + LFP\n",
      "\tt-006: awake spont. 2p imaging + LFP\n",
      "\tt-013: all optical trial with LFP\n",
      "\n",
      "\n",
      "|- Loaded TwoPhotonImagingTrial.alloptical experimental trial object ... \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# import experiment obj and TwoPhotonImagingTrial object\n",
    "expobj = ip.import_obj(pkl_path='/mnt/qnap_share/Data/imagingplus-example/RL109_analysis.pkl')\n",
    "print(expobj)\n",
    "trialobj = expobj.load_trial(trialID='t-013')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbdadd69",
   "metadata": {},
   "source": [
    "## paq data\n",
    "The `paq` sub-module is used to retrieve and store data from a .paq file for each trial. This temporal-data was saved into `trialobj.tmdata`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7708c13a",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          frame_clock  x_galvo_uncaging  slm2packio  markpoints2packio  packio2slm  packio2markpoints  pycontrol_rsync   voltage  stim_start_times\n",
      "0            0.005525         -1.167153    3.338084           0.005854   -0.001710           0.000264         1.320265  0.055181             False\n",
      "1            0.005854         -1.166824    3.339728           0.007827    0.000264          -0.000065         1.237395  0.053866             False\n",
      "2            0.005854         -1.165509    3.336768           0.007169   -0.000394           0.000592         1.158142  0.056168             False\n",
      "3            0.005525         -1.166495    3.334138           0.006183   -0.000065           0.000264         1.084809  0.054524             False\n",
      "4            0.005854         -1.166824    3.331178           0.007169    0.002565           0.000592         1.018710  0.055510             False\n",
      "...               ...               ...         ...                ...         ...                ...              ...       ...               ...\n",
      "11864763     0.006512         -1.165837    3.331836           0.008156    0.001579           0.000921         0.022296  3.461073             False\n",
      "11864764     0.007498         -1.165180    3.333151           0.006512    0.000592           0.000592         0.018679  3.461402             False\n",
      "11864765     0.006512         -1.164851    3.335782           0.007827   -0.001052           0.000264         0.018350  3.461731             False\n",
      "11864766     0.008485         -1.164851    3.341701           0.008156   -0.000065           0.000592         0.020323  3.461073             False\n",
      "11864767     0.006512         -1.164851    3.344990           0.009142   -0.001052           0.000592         0.019008  3.461402             False\n",
      "\n",
      "[11864768 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "# show all attributes saved in `trialobj.tmdata`\n",
    "print(trialobj.tmdata.data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d20bda",
   "metadata": {},
   "source": [
    "We can see that the 'frame_clock' paq channel was used as the primary channel for retrieving imaging frame timestamps synchronized to the paq clock. There are a number of other channels associated with this .paq file (however their data is not saved in this object to save space). Data from any of the other channels can stored directly to the `.paq` object using the `.storePaqChannel()` object method. In this case, the 'voltage' paq channel was stored in its entirety under `.paq.voltage`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83f9636f",
   "metadata": {},
   "source": [
    "## Suite2p data\n",
    "\n",
    "Suite2p is the primary Ca2+ imaging library that is integrated into the analysis pipeline. The dedicated `suite2p` submodule handles accessing suite2p functionality, as well as the data imported from Suite2p processing. Suite2p related data and methods are accessed using `trialobj.Suite2p`.\n",
    "\n",
    "Some example functionality is shown below, refer to the reference documentation for more extensive information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "badf397d",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Suite2p Results (trial level) Object, 16368 key_frames x 640 s2p ROIs"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trialobj.Suite2p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b01626e5",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[352.13678 , 411.9472  , 280.92416 , ..., 401.3014  , 515.2566  ,\n",
       "        541.41565 ],\n",
       "       [192.22421 , 395.29306 , 330.7496  , ..., 257.25806 , 285.31506 ,\n",
       "        126.660484],\n",
       "       [336.64996 , 539.26746 , 219.30368 , ..., 423.15295 , 433.1515  ,\n",
       "        220.52742 ],\n",
       "       ...,\n",
       "       [308.56497 , 303.55536 , 413.3554  , ..., 482.61044 , 386.2576  ,\n",
       "        283.1643  ],\n",
       "       [133.96815 , 122.96908 ,  84.63106 , ..., 109.2256  , 187.91866 ,\n",
       "        159.50813 ],\n",
       "       [252.49574 , 240.2455  , 273.2785  , ..., 181.601   , 229.0061  ,\n",
       "        278.74188 ]], dtype=float32)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the ROIs x raw data:\n",
    "trialobj.Suite2p.imdata\n",
    "\n",
    "# NOTE: we recommend working with the data that is stored in the anndata table (`trialobj.data`) \n",
    "# for your processing/analysis work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4196c1cc",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([{'ypix': array([102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 104,\n",
       "       104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105,\n",
       "       105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107,\n",
       "       107, 107, 107, 107, 108, 108, 108, 108, 108]), 'xpix': array([457, 458, 459, 460, 461, 456, 457, 458, 459, 460, 461, 462, 455,\n",
       "       456, 457, 458, 459, 460, 461, 462, 455, 456, 457, 458, 459, 460,\n",
       "       461, 462, 455, 456, 457, 458, 459, 460, 461, 462, 456, 457, 458,\n",
       "       459, 460, 461, 462, 457, 458, 459, 460, 461]), 'lam': array([0.00638468, 0.00895854, 0.01136301, 0.01110086, 0.00705759,\n",
       "       0.01243491, 0.02065784, 0.02732179, 0.03081292, 0.02857405,\n",
       "       0.01981334, 0.00643057, 0.01076856, 0.02522881, 0.03536875,\n",
       "       0.03719155, 0.03523667, 0.03170755, 0.02582202, 0.01195719,\n",
       "       0.01138049, 0.02936709, 0.0388124 , 0.03670786, 0.03174627,\n",
       "       0.02781939, 0.0247726 , 0.01484124, 0.0064307 , 0.02178741,\n",
       "       0.03363076, 0.03584319, 0.03252564, 0.02755288, 0.02219192,\n",
       "       0.01259714, 0.00933054, 0.01957686, 0.02685436, 0.02868195,\n",
       "       0.02438695, 0.01593173, 0.00604195, 0.00614118, 0.01241217,\n",
       "       0.01551214, 0.01438082, 0.00855111], dtype=float32), 'footprint': 1.0, 'mrs': 0.90981513, 'mrs0': 2.6042028761153, 'compact': 1.0019696625843746, 'med': [105.0, 459.0], 'npix': 48, 'overlap': array([ True, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False,  True, False, False, False, False, False, False,\n",
       "       False,  True,  True, False, False, False, False, False, False,\n",
       "        True,  True,  True, False, False, False, False,  True,  True,\n",
       "        True,  True, False]), 'radius': 3.5656038064243396, 'aspect_ratio': 1.0513974755946096, 'npix_norm': 0.649175, 'skew': 3.0169547, 'std': 353.67505},\n",
       "       {'ypix': array([46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48,\n",
       "       48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50,\n",
       "       50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52]), 'xpix': array([116, 117, 118, 119, 120, 121, 114, 115, 116, 117, 118, 119, 120,\n",
       "       121, 122, 115, 116, 117, 118, 119, 120, 121, 122, 115, 116, 117,\n",
       "       118, 119, 120, 121, 122, 116, 117, 118, 119, 120, 121, 122, 117,\n",
       "       118, 119, 120, 121, 118, 119, 120]), 'lam': array([0.00909591, 0.01456937, 0.01832514, 0.01890799, 0.01570023,\n",
       "       0.00973547, 0.00744942, 0.01453985, 0.02419673, 0.03284908,\n",
       "       0.03678438, 0.03534257, 0.02903387, 0.01822114, 0.00731372,\n",
       "       0.01591995, 0.03092505, 0.04184085, 0.0448999 , 0.04109605,\n",
       "       0.03287527, 0.02178643, 0.00951811, 0.00878189, 0.02346953,\n",
       "       0.03750538, 0.04307739, 0.03926133, 0.02999047, 0.01967636,\n",
       "       0.00941749, 0.01269261, 0.02711541, 0.03495914, 0.03259644,\n",
       "       0.0242609 , 0.01472905, 0.00662102, 0.01389002, 0.02195401,\n",
       "       0.02241964, 0.01594619, 0.00838999, 0.00760095, 0.00864918,\n",
       "       0.00606909], dtype=float32), 'footprint': 1.0, 'mrs': 0.9120764, 'mrs0': 2.543516044642053, 'compact': 1.0284258197493805, 'med': [48.5, 119.0], 'npix': 46, 'overlap': array([ True,  True,  True, False, False, False,  True,  True,  True,\n",
       "       False, False, False, False, False,  True,  True, False, False,\n",
       "       False, False, False,  True,  True,  True, False, False, False,\n",
       "       False,  True,  True,  True,  True, False, False,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True]), 'radius': 3.538467745454827, 'aspect_ratio': 1.0744280065263727, 'npix_norm': 0.62212604, 'skew': 3.7846518, 'std': 422.92258},\n",
       "       {'ypix': array([18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n",
       "       20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22,\n",
       "       22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,\n",
       "       24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26]), 'xpix': array([202, 203, 204, 205, 200, 201, 202, 203, 204, 205, 206, 207, 200,\n",
       "       201, 202, 203, 204, 205, 206, 207, 208, 200, 201, 202, 203, 204,\n",
       "       205, 206, 207, 208, 209, 199, 200, 201, 202, 203, 204, 205, 206,\n",
       "       207, 208, 200, 201, 202, 203, 204, 205, 206, 207, 200, 201, 202,\n",
       "       203, 204, 205, 206, 207, 201, 202, 203, 204, 205, 206, 207, 202,\n",
       "       203, 204, 205]), 'lam': array([0.00545189, 0.00608802, 0.00620215, 0.00528778, 0.00509016,\n",
       "       0.0122368 , 0.0166328 , 0.01625221, 0.01300093, 0.00930335,\n",
       "       0.00649809, 0.0054801 , 0.00835997, 0.01898179, 0.02681964,\n",
       "       0.02716714, 0.02171787, 0.01509764, 0.01041566, 0.00822917,\n",
       "       0.00693172, 0.0117227 , 0.02400276, 0.03096121, 0.03138037,\n",
       "       0.02795716, 0.02170095, 0.01506931, 0.01117996, 0.00849509,\n",
       "       0.00498517, 0.00457927, 0.01367252, 0.02446236, 0.02843685,\n",
       "       0.02762569, 0.02674694, 0.02412982, 0.01838652, 0.01173578,\n",
       "       0.00783563, 0.01189346, 0.02102235, 0.02426873, 0.02397901,\n",
       "       0.02280454, 0.0210674 , 0.01677865, 0.00966797, 0.00772996,\n",
       "       0.01501356, 0.0198556 , 0.02045688, 0.01869032, 0.01662539,\n",
       "       0.01329887, 0.00737635, 0.00898902, 0.01389659, 0.0156041 ,\n",
       "       0.01357497, 0.01125927, 0.00867181, 0.0049869 , 0.00614371,\n",
       "       0.00747479, 0.00685853, 0.00570034], dtype=float32), 'footprint': 1.0, 'mrs': 1.0885593, 'mrs0': 3.0920896689992627, 'compact': 1.0096624260641558, 'med': [22.0, 204.0], 'npix': 68, 'overlap': array([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True, False, False, False,\n",
       "       False, False, False,  True,  True, False, False, False, False,\n",
       "       False,  True,  True,  True, False, False, False, False,  True,\n",
       "        True,  True,  True,  True,  True,  True, False, False,  True,\n",
       "        True,  True,  True,  True,  True, False,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True]), 'radius': 4.124214681698544, 'aspect_ratio': 1.0274750851745456, 'npix_norm': 0.91966456, 'skew': 3.6033483, 'std': 342.36813},\n",
       "       ...,\n",
       "       {'ypix': array([158, 159, 159, 159, 159, 160, 160, 160, 160, 160, 161, 161, 161,\n",
       "       162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163,\n",
       "       163, 163, 163, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,\n",
       "       164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165,\n",
       "       165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166,\n",
       "       166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,\n",
       "       166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,\n",
       "       167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n",
       "       167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n",
       "       167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,\n",
       "       168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n",
       "       168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n",
       "       168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,\n",
       "       168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 169, 169, 169,\n",
       "       169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n",
       "       169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,\n",
       "       169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170,\n",
       "       170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,\n",
       "       170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,\n",
       "       170, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 171, 171,\n",
       "       171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171,\n",
       "       171, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172,\n",
       "       172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 173, 173, 173,\n",
       "       173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,\n",
       "       173, 173, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174,\n",
       "       174, 174, 174, 174, 175, 175]), 'xpix': array([375, 374, 375, 376, 377, 373, 374, 375, 376, 387, 374, 379, 380,\n",
       "       374, 375, 376, 379, 382, 385, 386, 388, 372, 373, 374, 375, 376,\n",
       "       378, 379, 386, 373, 374, 378, 379, 380, 384, 386, 387, 388, 389,\n",
       "       390, 392, 393, 401, 402, 403, 404, 353, 354, 355, 356, 373, 374,\n",
       "       382, 384, 385, 386, 387, 388, 392, 401, 402, 403, 404, 405, 352,\n",
       "       353, 354, 355, 356, 370, 373, 374, 377, 381, 382, 383, 384, 385,\n",
       "       386, 387, 388, 389, 390, 391, 392, 404, 405, 406, 409, 410, 411,\n",
       "       354, 355, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,\n",
       "       375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389,\n",
       "       390, 391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413,\n",
       "       353, 354, 355, 356, 357, 359, 365, 366, 367, 368, 369, 370, 371,\n",
       "       372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 386,\n",
       "       388, 389, 390, 391, 392, 403, 404, 406, 408, 409, 410, 411, 412,\n",
       "       413, 414, 415, 416, 417, 354, 355, 356, 357, 358, 359, 360, 361,\n",
       "       362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 376, 377,\n",
       "       379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 404,\n",
       "       405, 406, 407, 408, 413, 414, 415, 416, 417, 418, 355, 356, 359,\n",
       "       360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 377, 378, 379,\n",
       "       380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 404,\n",
       "       405, 406, 407, 416, 417, 418, 356, 367, 369, 370, 377, 378, 379,\n",
       "       380, 381, 382, 383, 387, 388, 389, 390, 391, 392, 403, 404, 416,\n",
       "       417, 418, 381, 382, 383, 387, 388, 389, 390, 391, 393, 395, 396,\n",
       "       397, 398, 399, 401, 403, 404, 405, 416, 417, 418, 359, 360, 380,\n",
       "       382, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 402,\n",
       "       403, 404, 405, 360, 390, 391, 392, 393, 394, 395, 396, 397, 398,\n",
       "       399, 400, 401, 402, 393, 394]), 'lam': array([0.00286928, 0.00259462, 0.00337227, 0.00255347, 0.00204948,\n",
       "       0.00202108, 0.00264209, 0.00276468, 0.00159292, 0.0017551 ,\n",
       "       0.00349023, 0.00286867, 0.00200605, 0.00511696, 0.00287608,\n",
       "       0.0017088 , 0.00151836, 0.00200302, 0.00164775, 0.00255818,\n",
       "       0.00152779, 0.00192849, 0.00335887, 0.00512549, 0.00234283,\n",
       "       0.00192926, 0.00196653, 0.00231145, 0.00387329, 0.00285975,\n",
       "       0.00298356, 0.00185528, 0.00229166, 0.00263537, 0.00209626,\n",
       "       0.00185905, 0.00425079, 0.00405806, 0.00191003, 0.0024535 ,\n",
       "       0.00249094, 0.00259834, 0.00277398, 0.00334289, 0.00350523,\n",
       "       0.00205348, 0.00302739, 0.00420143, 0.0031908 , 0.00126848,\n",
       "       0.00183293, 0.0029247 , 0.00197722, 0.00344929, 0.00318677,\n",
       "       0.00247438, 0.00310556, 0.00413478, 0.00176862, 0.00222995,\n",
       "       0.00326012, 0.00488892, 0.00418905, 0.00214313, 0.00250975,\n",
       "       0.00294531, 0.00288882, 0.0027946 , 0.0018857 , 0.00146898,\n",
       "       0.003711  , 0.00363824, 0.00154039, 0.00310719, 0.00375308,\n",
       "       0.00255617, 0.00466113, 0.00475768, 0.0030186 , 0.00474222,\n",
       "       0.00290538, 0.004514  , 0.00193983, 0.00285148, 0.00237405,\n",
       "       0.00505675, 0.00420587, 0.00221289, 0.00348542, 0.00489987,\n",
       "       0.00199475, 0.00183996, 0.00206761, 0.00302848, 0.00154587,\n",
       "       0.00251421, 0.00325534, 0.00324607, 0.00380017, 0.00604871,\n",
       "       0.00524036, 0.00550321, 0.00475682, 0.0037554 , 0.00470549,\n",
       "       0.00431793, 0.00338732, 0.00151919, 0.00159598, 0.00318731,\n",
       "       0.004536  , 0.00518949, 0.00561012, 0.00387813, 0.00329935,\n",
       "       0.00384294, 0.00238   , 0.00236514, 0.00192933, 0.00227059,\n",
       "       0.00360231, 0.00306801, 0.00418943, 0.00454379, 0.00372138,\n",
       "       0.002403  , 0.00354666, 0.00386164, 0.003181  , 0.00245785,\n",
       "       0.00255984, 0.00366211, 0.00436258, 0.00235788, 0.00183096,\n",
       "       0.00173962, 0.00151972, 0.00326573, 0.00403507, 0.00260203,\n",
       "       0.00447684, 0.00431312, 0.00344967, 0.00557541, 0.00342687,\n",
       "       0.00158354, 0.00394798, 0.00276107, 0.00271234, 0.00308114,\n",
       "       0.003789  , 0.00350815, 0.00290263, 0.00340051, 0.00217004,\n",
       "       0.00336243, 0.00159389, 0.00297907, 0.00402694, 0.00370309,\n",
       "       0.00189018, 0.00422567, 0.00462089, 0.00237474, 0.00265822,\n",
       "       0.00387684, 0.00313393, 0.0031415 , 0.00460251, 0.00364379,\n",
       "       0.00282508, 0.00214486, 0.00274323, 0.00315781, 0.00296068,\n",
       "       0.00282563, 0.00210713, 0.0016407 , 0.00155725, 0.00292419,\n",
       "       0.00161113, 0.00187676, 0.00170153, 0.00286219, 0.00260381,\n",
       "       0.00237066, 0.00381711, 0.00229396, 0.0043518 , 0.00322419,\n",
       "       0.00283945, 0.00257016, 0.00179217, 0.0015092 , 0.00209903,\n",
       "       0.00221834, 0.00235991, 0.00261474, 0.00332405, 0.00258864,\n",
       "       0.002608  , 0.00157223, 0.0016706 , 0.0020885 , 0.00282937,\n",
       "       0.00343391, 0.00242269, 0.00662414, 0.00623758, 0.00523879,\n",
       "       0.00461471, 0.00328737, 0.00286894, 0.00381225, 0.00226984,\n",
       "       0.00238015, 0.00494135, 0.00242791, 0.00132498, 0.00289301,\n",
       "       0.00220604, 0.00326554, 0.00390699, 0.00538431, 0.00660804,\n",
       "       0.00181801, 0.00395399, 0.00194908, 0.00214654, 0.00397877,\n",
       "       0.00191753, 0.00191654, 0.00249725, 0.00191403, 0.00348469,\n",
       "       0.0025085 , 0.00253094, 0.00373572, 0.00212011, 0.00132894,\n",
       "       0.00190789, 0.00326894, 0.00351297, 0.00348651, 0.0038919 ,\n",
       "       0.00185133, 0.00382373, 0.00376294, 0.00448563, 0.00410995,\n",
       "       0.00243404, 0.00267941, 0.00238115, 0.00217249, 0.00210481,\n",
       "       0.0014822 , 0.00162536, 0.00144151, 0.0023181 , 0.00149256,\n",
       "       0.00183859, 0.00408302, 0.00452229, 0.00208426, 0.00525849,\n",
       "       0.00521683, 0.00460148, 0.0049272 , 0.00447842, 0.00195348,\n",
       "       0.00327713, 0.00339903, 0.00256586, 0.00375898, 0.0021151 ,\n",
       "       0.00260367, 0.00298934, 0.00345007, 0.00504905, 0.00679261,\n",
       "       0.00553208, 0.00556962, 0.0051293 , 0.00482718, 0.00153104,\n",
       "       0.00187431, 0.00337595, 0.00319663, 0.00225396, 0.0020286 ,\n",
       "       0.00243751, 0.00402626, 0.00299196, 0.00178289, 0.00192062,\n",
       "       0.00151216, 0.00169066, 0.00303077, 0.00178265, 0.00131673,\n",
       "       0.0019633 , 0.00383657, 0.00185625, 0.00405352, 0.003759  ,\n",
       "       0.00313889, 0.00364831, 0.00576573, 0.0017102 , 0.00263339,\n",
       "       0.00242149, 0.00277657, 0.00511749, 0.00442813, 0.00205553,\n",
       "       0.0018405 , 0.00177784, 0.00203138, 0.00323508, 0.00316913,\n",
       "       0.00243073, 0.00238249, 0.00385366, 0.00318298, 0.00193085,\n",
       "       0.00209014, 0.00362567, 0.00206467, 0.00271361, 0.00130027,\n",
       "       0.00184112], dtype=float32), 'footprint': 2.0, 'mrs': 4.998543, 'mrs0': 6.843361744187066, 'compact': 2.0948364712531085, 'med': [168.0, 385.0], 'npix': 331, 'overlap': array([ True, False, False,  True,  True, False,  True,  True, False,\n",
       "        True, False, False,  True, False,  True, False,  True,  True,\n",
       "        True,  True,  True,  True,  True, False,  True, False, False,\n",
       "        True,  True,  True, False,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True, False, False,  True, False,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True, False,  True,  True,\n",
       "        True,  True,  True,  True, False, False,  True, False, False,\n",
       "        True,  True,  True,  True,  True,  True,  True, False, False,\n",
       "       False,  True, False,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True, False, False,  True,  True,  True,  True,  True,\n",
       "       False, False, False, False, False, False, False, False,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True, False, False,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True, False, False, False,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True, False, False, False,\n",
       "       False, False, False, False, False,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True, False, False, False, False,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True, False, False,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True, False,\n",
       "       False, False, False, False, False, False,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True, False,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True, False, False,  True, False, False, False, False,\n",
       "        True, False, False, False, False, False, False, False,  True,\n",
       "       False,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True, False, False,  True,  True,  True,  True,  True,  True,\n",
       "        True, False, False, False, False,  True, False, False, False,\n",
       "       False, False,  True,  True, False,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True, False,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True, False,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True]), 'radius': 33.09026240792262, 'aspect_ratio': 1.6760580112361614, 'npix_norm': 4.4766026, 'skew': 2.9793897, 'std': 56.44806},\n",
       "       {'ypix': array([274, 274, 274, 274, 275, 275, 275, 275, 276, 276, 276, 276, 277,\n",
       "       277, 277, 277, 278, 278, 278, 279, 279, 279, 279, 280, 280, 280,\n",
       "       280, 281, 281, 281, 281, 282, 282, 282, 282, 282, 282, 282, 282,\n",
       "       283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 284, 284,\n",
       "       284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 285,\n",
       "       285, 285, 286, 286, 286, 286, 286, 286, 286, 286, 287, 287, 287,\n",
       "       287, 287, 287, 287, 287, 287, 288, 288, 288, 288, 288, 288, 288,\n",
       "       288, 288, 288, 289, 289, 289, 289, 289, 289, 289, 289, 290, 290,\n",
       "       290, 290, 290, 290, 290, 291, 291, 291, 291, 291, 291, 292, 292,\n",
       "       292, 292, 292, 292, 292, 292, 292, 292, 293, 293, 293, 293, 293,\n",
       "       293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294,\n",
       "       294, 294, 294, 294, 294, 294, 294, 294, 295, 295, 295, 295, 295,\n",
       "       295, 295, 295, 295, 295, 295, 295, 296, 296, 296, 296, 296]), 'xpix': array([235, 236, 237, 238, 235, 236, 237, 238, 235, 236, 237, 238, 235,\n",
       "       236, 237, 238, 236, 237, 238, 236, 237, 238, 239, 233, 237, 238,\n",
       "       239, 233, 234, 238, 239, 228, 232, 233, 234, 235, 236, 238, 239,\n",
       "       228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 229, 230,\n",
       "       231, 232, 233, 234, 235, 236, 229, 230, 231, 232, 233, 234, 235,\n",
       "       236, 237, 231, 232, 233, 234, 235, 236, 237, 238, 232, 233, 234,\n",
       "       235, 236, 237, 238, 239, 240, 232, 233, 234, 235, 236, 237, 238,\n",
       "       239, 240, 241, 238, 239, 240, 241, 242, 243, 244, 245, 238, 239,\n",
       "       240, 241, 242, 243, 244, 237, 238, 239, 240, 243, 244, 236, 237,\n",
       "       238, 239, 240, 244, 245, 246, 249, 250, 236, 237, 238, 239, 240,\n",
       "       242, 244, 245, 246, 247, 248, 249, 250, 251, 237, 238, 239, 240,\n",
       "       241, 242, 245, 246, 247, 248, 249, 250, 238, 239, 240, 241, 242,\n",
       "       243, 244, 245, 246, 247, 248, 249, 242, 243, 244, 248, 249]), 'lam': array([0.00353741, 0.00517016, 0.00329727, 0.00242688, 0.00562091,\n",
       "       0.00851122, 0.00902197, 0.00581402, 0.00508556, 0.00906205,\n",
       "       0.01027361, 0.00704236, 0.00266805, 0.00577183, 0.00894417,\n",
       "       0.00258301, 0.00346624, 0.00572842, 0.00828662, 0.00369061,\n",
       "       0.00778687, 0.00929033, 0.00555683, 0.00537309, 0.00639053,\n",
       "       0.01002211, 0.00271699, 0.00966459, 0.00380201, 0.00461136,\n",
       "       0.00312464, 0.00320701, 0.00406449, 0.00522045, 0.00784463,\n",
       "       0.00931368, 0.00349013, 0.00940471, 0.00486539, 0.00372914,\n",
       "       0.00348873, 0.00299941, 0.00649019, 0.01081055, 0.00591648,\n",
       "       0.00761427, 0.00786332, 0.00745158, 0.00659136, 0.00329301,\n",
       "       0.00506582, 0.00632644, 0.00559625, 0.00547724, 0.0035666 ,\n",
       "       0.00537009, 0.00703207, 0.00474662, 0.00293929, 0.00527441,\n",
       "       0.00700889, 0.00802964, 0.00545722, 0.00701146, 0.00783141,\n",
       "       0.00954959, 0.00472145, 0.00286008, 0.00413494, 0.00316838,\n",
       "       0.00655688, 0.00773258, 0.01021765, 0.00886467, 0.0038621 ,\n",
       "       0.00265623, 0.00318746, 0.00749208, 0.01182964, 0.01098835,\n",
       "       0.00886356, 0.00513412, 0.00592422, 0.00542556, 0.00280691,\n",
       "       0.00454984, 0.00804457, 0.0096524 , 0.00539598, 0.00430585,\n",
       "       0.00582052, 0.00585476, 0.00655159, 0.00419438, 0.00528989,\n",
       "       0.00720624, 0.00521403, 0.0070284 , 0.00683123, 0.00418202,\n",
       "       0.00422283, 0.00337052, 0.00919068, 0.00937859, 0.00727854,\n",
       "       0.0053387 , 0.0047962 , 0.0045184 , 0.00378519, 0.00492048,\n",
       "       0.01271848, 0.00960135, 0.00512651, 0.00453599, 0.00539573,\n",
       "       0.00272184, 0.00689939, 0.00851619, 0.00394244, 0.00283469,\n",
       "       0.00492722, 0.00332688, 0.00271739, 0.00385867, 0.0044151 ,\n",
       "       0.00225622, 0.00788738, 0.00966464, 0.00583506, 0.00456629,\n",
       "       0.00366349, 0.00343617, 0.00392625, 0.0041062 , 0.00613991,\n",
       "       0.00736859, 0.00892439, 0.00740234, 0.00635011, 0.00564566,\n",
       "       0.01279525, 0.01160507, 0.0078163 , 0.00567653, 0.00653419,\n",
       "       0.00338925, 0.00434683, 0.0054269 , 0.00842457, 0.0101354 ,\n",
       "       0.00415056, 0.00570583, 0.00666986, 0.00296249, 0.00338989,\n",
       "       0.00395845, 0.00390827, 0.00890002, 0.00437463, 0.00502896,\n",
       "       0.00769272, 0.01021333, 0.00910969, 0.0031401 , 0.00529241,\n",
       "       0.00510558, 0.00368369, 0.00422071], dtype=float32), 'footprint': 1.0, 'mrs': 2.4965265, 'mrs0': 4.877157380553088, 'compact': 1.468066186248697, 'med': [287.5, 238.0], 'npix': 168, 'overlap': array([False, False, False, False,  True,  True, False, False,  True,\n",
       "        True,  True, False,  True,  True, False, False,  True,  True,\n",
       "       False,  True,  True,  True, False,  True,  True, False, False,\n",
       "        True,  True,  True, False,  True, False,  True,  True,  True,\n",
       "        True, False, False,  True,  True, False, False, False,  True,\n",
       "       False, False, False, False, False,  True,  True,  True, False,\n",
       "       False, False, False,  True,  True,  True, False, False, False,\n",
       "       False, False, False,  True,  True, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False,  True,\n",
       "        True,  True,  True, False, False,  True,  True,  True,  True,\n",
       "        True, False,  True,  True,  True,  True,  True, False,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True, False,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True, False,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True, False]), 'radius': 13.957618205848593, 'aspect_ratio': 1.339115841204737, 'npix_norm': 2.2721124, 'skew': 1.6962737, 'std': 55.597923},\n",
       "       {'ypix': array([380, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 382,\n",
       "       382, 382, 382, 382, 382, 382, 382, 382, 382, 383, 383, 383, 383,\n",
       "       383, 383, 383, 383, 383, 384, 384, 384, 384, 384, 384, 384, 384,\n",
       "       384, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 386, 386,\n",
       "       386, 386, 386, 386, 386, 386, 386, 386, 386, 387, 387, 387, 387,\n",
       "       387, 387, 387, 387, 387, 387, 387, 388, 388, 388, 388, 388, 388,\n",
       "       388, 388, 388, 388, 389, 389, 389, 389, 389, 389, 389, 390, 390,\n",
       "       390, 390, 390, 391, 391, 391, 391, 391, 391, 391, 392, 392, 392,\n",
       "       392, 392, 392, 392, 392, 393, 393, 393, 393, 393, 393, 393, 394,\n",
       "       394, 394, 394, 394, 394, 394, 395, 395, 395, 395, 395, 395, 395,\n",
       "       396, 396, 396, 396, 397]), 'xpix': array([165, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 161,\n",
       "       162, 167, 168, 169, 170, 171, 172, 173, 174, 162, 167, 168, 169,\n",
       "       170, 171, 172, 173, 174, 166, 167, 168, 169, 170, 171, 172, 173,\n",
       "       174, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 164, 165,\n",
       "       166, 167, 168, 169, 170, 171, 172, 173, 174, 164, 165, 166, 167,\n",
       "       168, 169, 170, 171, 172, 173, 174, 165, 166, 167, 168, 169, 170,\n",
       "       171, 172, 173, 174, 167, 168, 169, 170, 171, 172, 173, 167, 168,\n",
       "       170, 171, 172, 166, 167, 168, 169, 170, 171, 172, 164, 165, 166,\n",
       "       167, 168, 169, 170, 171, 164, 165, 166, 167, 168, 169, 170, 164,\n",
       "       165, 166, 167, 168, 169, 170, 164, 165, 166, 167, 168, 169, 170,\n",
       "       166, 167, 168, 170, 167]), 'lam': array([0.00340487, 0.00443801, 0.00432576, 0.00364362, 0.00372115,\n",
       "       0.0040224 , 0.00417633, 0.00480787, 0.00354271, 0.00403816,\n",
       "       0.0050534 , 0.00306647, 0.00317431, 0.00347661, 0.00582939,\n",
       "       0.00717845, 0.00530369, 0.00492711, 0.00470956, 0.00557796,\n",
       "       0.00620364, 0.00479258, 0.00335542, 0.00475656, 0.00652052,\n",
       "       0.00544199, 0.00550956, 0.00730126, 0.00841345, 0.00802831,\n",
       "       0.0042955 , 0.00464875, 0.0083406 , 0.00900917, 0.00706007,\n",
       "       0.00674814, 0.00993268, 0.01159688, 0.00853468, 0.00410526,\n",
       "       0.0044767 , 0.00742816, 0.00709389, 0.00519973, 0.00671921,\n",
       "       0.00670468, 0.00825069, 0.01028707, 0.0091009 , 0.00554293,\n",
       "       0.00396461, 0.00787717, 0.00824603, 0.0078269 , 0.00689538,\n",
       "       0.00743007, 0.00990708, 0.01138136, 0.0117935 , 0.00800649,\n",
       "       0.0052063 , 0.0050209 , 0.00850611, 0.0077141 , 0.00610797,\n",
       "       0.0056674 , 0.00711334, 0.01013461, 0.01220826, 0.01165707,\n",
       "       0.01071399, 0.00704673, 0.00452671, 0.00680357, 0.00701252,\n",
       "       0.00787713, 0.00966987, 0.00868987, 0.00850217, 0.00997268,\n",
       "       0.00815679, 0.00552057, 0.00465902, 0.00710784, 0.00624458,\n",
       "       0.00395763, 0.00561889, 0.00919538, 0.00613715, 0.00527674,\n",
       "       0.00642221, 0.00384698, 0.00716806, 0.0092556 , 0.00563079,\n",
       "       0.00597326, 0.00725889, 0.00778292, 0.00925728, 0.00931448,\n",
       "       0.00463286, 0.00385788, 0.00715826, 0.00858624, 0.0110799 ,\n",
       "       0.01386848, 0.01385103, 0.01151467, 0.00747484, 0.00697996,\n",
       "       0.01026383, 0.01158813, 0.01415514, 0.01577739, 0.01696804,\n",
       "       0.01635207, 0.00626897, 0.01167264, 0.00914658, 0.00947039,\n",
       "       0.01374428, 0.01636752, 0.01416822, 0.00490234, 0.00620987,\n",
       "       0.00580414, 0.00667666, 0.01042749, 0.00996509, 0.00810222,\n",
       "       0.00406754, 0.00441266, 0.00561097, 0.00375401, 0.00403797],\n",
       "      dtype=float32), 'footprint': 2.0, 'mrs': 1.7417334, 'mrs0': 4.367111321475383, 'compact': 1.1438356678731552, 'med': [387.0, 169.0], 'npix': 135, 'overlap': array([ True,  True,  True,  True, False, False, False, False, False,\n",
       "       False, False,  True,  True,  True, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False, False, False,\n",
       "       False, False, False, False, False, False, False,  True,  True,\n",
       "       False, False, False, False, False, False, False, False,  True,\n",
       "        True, False, False, False, False, False,  True,  True, False,\n",
       "       False,  True,  True,  True, False, False,  True, False, False,\n",
       "        True,  True, False, False,  True,  True,  True,  True, False,\n",
       "        True, False,  True,  True,  True,  True,  True, False, False,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True,  True,  True,  True,  True]), 'radius': 8.848792719685099, 'aspect_ratio': 1.2544510943588814, 'npix_norm': 1.8258046, 'skew': 1.5335176, 'std': 60.688213}],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# meta-information about ROIs from the Suite2p stat file:\n",
    "trialobj.Suite2p.stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "52f2aadf",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'suite2p_version': '0.9.3',\n",
       " 'look_one_level_down': False,\n",
       " 'fast_disk': '/mnt/sandbox/pshah/suite2p_tmp/suite2p/plane0',\n",
       " 'delete_bin': True,\n",
       " 'mesoscan': False,\n",
       " 'bruker': False,\n",
       " 'h5py': [],\n",
       " 'h5py_key': 'data',\n",
       " 'save_path0': '/home/pshah/mnt/qnap/Data/2020-12-19',\n",
       " 'save_folder': '/home/pshah/mnt/qnap/Analysis/2020-12-19/suite2p/alloptical-2p-1x-alltrials',\n",
       " 'subfolders': [],\n",
       " 'move_bin': False,\n",
       " 'nplanes': 1,\n",
       " 'nchannels': 1,\n",
       " 'functional_chan': 1,\n",
       " 'tau': 1.26,\n",
       " 'fs': 30.0,\n",
       " 'force_sktiff': False,\n",
       " 'frames_include': -1,\n",
       " 'multiplane_parallel': False,\n",
       " 'preclassify': 0.0,\n",
       " 'save_mat': True,\n",
       " 'save_NWB': False,\n",
       " 'combined': True,\n",
       " 'aspect': 1.0,\n",
       " 'do_bidiphase': False,\n",
       " 'bidiphase': 0,\n",
       " 'bidi_corrected': True,\n",
       " 'do_registration': True,\n",
       " 'two_step_registration': False,\n",
       " 'keep_movie_raw': False,\n",
       " 'nimg_init': 200,\n",
       " 'batch_size': 2000,\n",
       " 'maxregshift': 0.1,\n",
       " 'align_by_chan': 1,\n",
       " 'reg_tif': True,\n",
       " 'reg_tif_chan2': False,\n",
       " 'subpixel': 10,\n",
       " 'smooth_sigma_time': 0,\n",
       " 'smooth_sigma': 1.15,\n",
       " 'th_badframes': 1.0,\n",
       " 'norm_frames': True,\n",
       " 'force_refImg': False,\n",
       " 'pad_fft': False,\n",
       " 'nonrigid': True,\n",
       " 'block_size': (128, 128),\n",
       " 'snr_thresh': 1.2,\n",
       " 'maxregshiftNR': 5,\n",
       " '1Preg': False,\n",
       " 'spatial_hp': 42,\n",
       " 'spatial_hp_reg': 42,\n",
       " 'spatial_hp_detect': 25,\n",
       " 'pre_smooth': 0,\n",
       " 'spatial_taper': 40,\n",
       " 'roidetect': True,\n",
       " 'spikedetect': True,\n",
       " 'anatomical_only': False,\n",
       " 'sparse_mode': True,\n",
       " 'diameter': 4.5,\n",
       " 'spatial_scale': 0,\n",
       " 'connected': True,\n",
       " 'nbinned': 5000,\n",
       " 'max_iterations': 20,\n",
       " 'threshold_scaling': 1.0,\n",
       " 'max_overlap': 0.75,\n",
       " 'high_pass': 100,\n",
       " 'use_builtin_classifier': False,\n",
       " 'neuropil_extract': True,\n",
       " 'inner_neuropil_radius': 2,\n",
       " 'min_neuropil_pixels': 350,\n",
       " 'allow_overlap': False,\n",
       " 'chan2_thres': 0.65,\n",
       " 'baseline': 'maximin',\n",
       " 'win_baseline': 60.0,\n",
       " 'sig_baseline': 10.0,\n",
       " 'prctile_baseline': 8.0,\n",
       " 'neucoeff': 0.7,\n",
       " 'num_workers': 50,\n",
       " 'num_workers_roi': 0,\n",
       " 'navg_frames_svd': 5000,\n",
       " 'nsvd_for_roi': 1000,\n",
       " 'ratio_neuropil': 6.0,\n",
       " 'ratio_neuropil_to_cell': 3,\n",
       " 'tile_factor': 1.0,\n",
       " 'outer_neuropil_radius': inf,\n",
       " 'data_path': ['/home/pshah/mnt/qnap/Data/2020-12-19'],\n",
       " 'tiff_list': ['/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-005/2020-12-19_t-005_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-006/2020-12-19_t-006_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-007/2020-12-19_t-007_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-008/2020-12-19_t-008_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-011/2020-12-19_t-011_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-012/2020-12-19_t-012_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-013/2020-12-19_t-013_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-014/2020-12-19_t-014_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-016/2020-12-19_t-016_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-017/2020-12-19_t-017_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-018/2020-12-19_t-018_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-019/2020-12-19_t-019_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-020/2020-12-19_t-020_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-021/2020-12-19_t-021_Cycle00001_Ch3.tif'],\n",
       " 'input_format': 'tif',\n",
       " 'save_path': '/home/pshah/mnt/qnap/Analysis/2020-12-19/suite2p/alloptical-2p-1x-alltrials/plane0',\n",
       " 'ops_path': '/home/pshah/mnt/qnap/Analysis/2020-12-19/suite2p/alloptical-2p-1x-alltrials/plane0/ops.npy',\n",
       " 'reg_file': '/mnt/sandbox/pshah/suite2p_tmp/suite2p/plane0/data.bin',\n",
       " 'first_tiffs': array([ True, False, False, False, False, False, False, False, False,\n",
       "        False, False, False, False, False]),\n",
       " 'frames_per_folder': array([256018], dtype=int32),\n",
       " 'filelist': ['/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-005/2020-12-19_t-005_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-006/2020-12-19_t-006_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-007/2020-12-19_t-007_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-008/2020-12-19_t-008_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-011/2020-12-19_t-011_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-012/2020-12-19_t-012_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-013/2020-12-19_t-013_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-014/2020-12-19_t-014_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-016/2020-12-19_t-016_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-017/2020-12-19_t-017_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-018/2020-12-19_t-018_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-019/2020-12-19_t-019_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-020/2020-12-19_t-020_Cycle00001_Ch3.tif',\n",
       "  '/home/pshah/mnt/qnap/Data/2020-12-19/2020-12-19_t-021/2020-12-19_t-021_Cycle00001_Ch3.tif'],\n",
       " 'nframes': 256018,\n",
       " 'frames_per_file': array([14880, 23173, 16368, 16368, 16368, 16368, 16368, 16368, 15436,\n",
       "        17520, 26784, 16368, 20015, 23634]),\n",
       " 'meanImg': array([[ 50.12349604,  50.23252739,  48.01559696, ..., 121.3560685 ,\n",
       "          95.51667508,  71.15855232],\n",
       "        [ 51.21065841,  50.49309602,  48.47367467, ..., 121.16339316,\n",
       "          96.34339423,  72.14198395],\n",
       "        [ 54.0642524 ,  53.15367606,  50.94001476, ..., 122.28726252,\n",
       "          97.78234619,  74.57712429],\n",
       "        ...,\n",
       "        [ 48.55685746,  48.13359499,  47.3793314 , ..., 110.28305276,\n",
       "          85.49449971,  66.07143804],\n",
       "        [ 48.142719  ,  47.56769193,  46.87753913, ..., 112.38966948,\n",
       "          88.19436885,  68.4536527 ],\n",
       "        [ 47.91820708,  47.66211425,  46.95750661, ..., 114.25616458,\n",
       "          90.47362592,  70.60839945]]),\n",
       " 'Ly': 512,\n",
       " 'Lx': 512,\n",
       " 'yrange': [9, 503],\n",
       " 'xrange': [8, 504],\n",
       " 'date_proc': ('2021-04-12 01:24:09.523948',),\n",
       " 'refImg': array([[ 35,  40,  64, ..., 162, 107,  99],\n",
       "        [ 43,  49,  41, ..., 198, 108, 113],\n",
       "        [ 43,  43,  80, ..., 198, 174, 117],\n",
       "        ...,\n",
       "        [ 71,  55,  41, ..., 107,  87,  55],\n",
       "        [ 35,  54,  49, ..., 104,  78,  60],\n",
       "        [ 53,  36,  41, ...,  86,  52,  50]], dtype=int16),\n",
       " 'yblock': [array([  0, 128]),\n",
       "  array([  0, 128]),\n",
       "  array([  0, 128]),\n",
       "  array([  0, 128]),\n",
       "  array([  0, 128]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([ 76, 204]),\n",
       "  array([ 76, 204]),\n",
       "  array([ 76, 204]),\n",
       "  array([ 76, 204]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([153, 281]),\n",
       "  array([153, 281]),\n",
       "  array([153, 281]),\n",
       "  array([153, 281]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([230, 358]),\n",
       "  array([230, 358]),\n",
       "  array([230, 358]),\n",
       "  array([230, 358]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([307, 435]),\n",
       "  array([307, 435]),\n",
       "  array([307, 435]),\n",
       "  array([307, 435]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([384, 512]),\n",
       "  array([384, 512]),\n",
       "  array([384, 512]),\n",
       "  array([384, 512]),\n",
       "  array([384, 512])],\n",
       " 'xblock': [array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512]),\n",
       "  array([  0, 128]),\n",
       "  array([ 76, 204]),\n",
       "  array([153, 281]),\n",
       "  array([230, 358]),\n",
       "  array([307, 435]),\n",
       "  array([384, 512])],\n",
       " 'nblocks': [6, 6],\n",
       " 'NRsm': array([[5.20324048e-01, 1.91416520e-01, 9.53006737e-03, ...,\n",
       "         8.91787773e-16, 8.13205187e-19, 1.00357493e-22],\n",
       "        [1.51273845e-01, 4.11204943e-01, 1.51273845e-01, ...,\n",
       "         1.04596789e-13, 7.04767619e-16, 6.42664882e-19],\n",
       "        [7.45365784e-03, 1.49710720e-01, 4.06955929e-01, ...,\n",
       "         2.07917407e-12, 1.03515982e-13, 6.97485198e-16],\n",
       "        ...,\n",
       "        [6.97485198e-16, 1.03515982e-13, 2.07917407e-12, ...,\n",
       "         4.06955929e-01, 1.49710720e-01, 7.45365784e-03],\n",
       "        [6.42664882e-19, 7.04767619e-16, 1.04596789e-13, ...,\n",
       "         1.51273845e-01, 4.11204943e-01, 1.51273845e-01],\n",
       "        [1.00357493e-22, 8.13205187e-19, 8.91787773e-16, ...,\n",
       "         9.53006737e-03, 1.91416520e-01, 5.20324048e-01]]),\n",
       " 'yoff': array([ 6,  6,  6, ..., -5, -3, -3], dtype=int32),\n",
       " 'xoff': array([ 1,  1,  1, ..., -1,  0, -1], dtype=int32),\n",
       " 'corrXY': array([0.00959044, 0.00960284, 0.0094241 , ..., 0.00457666, 0.00501979,\n",
       "        0.00504856], dtype=float32),\n",
       " 'yoff1': array([[-1.4      , -0.7      , -2.       , ...,  1.4      , -1.1      ,\n",
       "          1.6      ],\n",
       "        [ 1.       ,  0.4      , -1.2      , ..., -0.7      ,  0.2      ,\n",
       "          0.       ],\n",
       "        [-0.2      ,  1.9      , -1.6      , ...,  0.2      , -0.1      ,\n",
       "         -0.2      ],\n",
       "        ...,\n",
       "        [ 1.3      , -2.4      ,  0.8      , ...,  2.6      ,  3.3      ,\n",
       "          3.4      ],\n",
       "        [-3.4      , -2.1      , -1.9      , ...,  2.6      ,  2.1      ,\n",
       "          0.4000001],\n",
       "        [-0.8      , -1.       , -1.8      , ...,  4.       ,  3.9      ,\n",
       "          3.7      ]], dtype=float32),\n",
       " 'xoff1': array([[ 0.7       ,  0.7       ,  0.        , ..., -0.4       ,\n",
       "         -0.3       ,  1.6       ],\n",
       "        [ 0.1       , -0.1       , -1.        , ..., -0.2       ,\n",
       "          0.7       ,  0.9       ],\n",
       "        [ 1.5       ,  0.5       ,  0.7       , ..., -0.5       ,\n",
       "         -0.3       ,  0.        ],\n",
       "        ...,\n",
       "        [-2.4       , -3.4       , -3.5       , ..., -0.5       ,\n",
       "          2.1       ,  2.1       ],\n",
       "        [-1.8       , -6.2       , -4.8       , ...,  1.        ,\n",
       "          1.5       , -0.39999998],\n",
       "        [-5.5       , -5.2       , -2.9       , ...,  2.2       ,\n",
       "          3.2       ,  2.1       ]], dtype=float32),\n",
       " 'corrXY1': array([[0.00919435, 0.00919876, 0.0116785 , ..., 0.00711383, 0.00944198,\n",
       "         0.00948804],\n",
       "        [0.00647564, 0.00736795, 0.01000382, ..., 0.0076691 , 0.01092151,\n",
       "         0.00926576],\n",
       "        [0.00583567, 0.00848304, 0.0075896 , ..., 0.00753374, 0.00743041,\n",
       "         0.00842835],\n",
       "        ...,\n",
       "        [0.00330454, 0.00626063, 0.00424052, ..., 0.00529465, 0.00432887,\n",
       "         0.0035261 ],\n",
       "        [0.00343887, 0.00463221, 0.00404293, ..., 0.00740753, 0.00634679,\n",
       "         0.00395357],\n",
       "        [0.00442418, 0.00470658, 0.00492312, ..., 0.00652623, 0.00688208,\n",
       "         0.00364723]], dtype=float32),\n",
       " 'badframes': array([False, False, False, ..., False, False, False]),\n",
       " 'tPC': array([[-0.00385161, -0.00559585,  0.0003806 , ..., -0.00223742,\n",
       "          0.00463703,  0.00163983],\n",
       "        [-0.00315774, -0.00614559,  0.00095745, ..., -0.00359311,\n",
       "          0.00548552,  0.00198896],\n",
       "        [-0.00274034, -0.00611279, -0.00012864, ..., -0.00142712,\n",
       "          0.00467182, -0.00026236],\n",
       "        ...,\n",
       "        [-0.00553717,  0.00480035,  0.0068187 , ..., -0.00425075,\n",
       "         -0.00529271, -0.00728753],\n",
       "        [-0.00621215,  0.00524708,  0.0061828 , ..., -0.00442626,\n",
       "         -0.0048028 , -0.00833573],\n",
       "        [-0.00602844,  0.00649163,  0.00625741, ..., -0.00518075,\n",
       "         -0.00291675, -0.00805337]], dtype=float32),\n",
       " 'regPC': array([[[[ 48.803333,  61.823334,  66.433334, ..., 104.39333 ,\n",
       "           111.20333 , 118.503334],\n",
       "          [ 57.82    ,  64.206665,  64.71    , ..., 106.94    ,\n",
       "           101.18    , 114.16333 ],\n",
       "          [ 48.88    ,  49.67    ,  72.956665, ..., 112.85333 ,\n",
       "           116.43667 , 118.316666],\n",
       "          ...,\n",
       "          [ 83.78667 , 122.68    , 117.26    , ...,  71.87666 ,\n",
       "            69.23333 ,  63.966667],\n",
       "          [ 76.95    , 104.93    , 116.46333 , ...,  63.573334,\n",
       "            76.07333 ,  88.84    ],\n",
       "          [102.45333 , 125.84333 , 129.33333 , ...,  64.596664,\n",
       "            59.756668,  53.56    ]],\n",
       " \n",
       "         [[116.08    , 133.21    , 133.70667 , ..., 265.08334 ,\n",
       "           287.74335 , 256.68    ],\n",
       "          [114.166664, 129.26    , 141.96666 , ..., 268.33334 ,\n",
       "           299.51334 , 279.81332 ],\n",
       "          [118.82    , 126.42    , 122.82    , ..., 253.73334 ,\n",
       "           265.92667 , 288.83    ],\n",
       "          ...,\n",
       "          [114.68667 , 137.00333 , 113.41    , ..., 108.9     ,\n",
       "           121.93667 , 108.63333 ],\n",
       "          [ 93.596664, 146.42    , 142.58333 , ..., 109.67333 ,\n",
       "           102.35333 , 108.55    ],\n",
       "          [116.78333 , 132.78667 , 118.73    , ..., 105.61667 ,\n",
       "           113.886665, 101.40667 ]],\n",
       " \n",
       "         [[100.69    , 125.846664, 133.60667 , ..., 301.96667 ,\n",
       "           311.06332 , 315.62332 ],\n",
       "          [ 95.03667 , 119.53667 , 138.27667 , ..., 286.80334 ,\n",
       "           292.23334 , 312.08    ],\n",
       "          [ 91.10667 , 117.54    , 141.71    , ..., 284.78665 ,\n",
       "           291.26    , 314.41333 ],\n",
       "          ...,\n",
       "          [111.99    , 154.89333 , 149.94    , ..., 106.46333 ,\n",
       "            95.      ,  92.403336],\n",
       "          [ 94.79667 , 141.68    , 165.19    , ...,  78.92333 ,\n",
       "            93.78333 , 125.73333 ],\n",
       "          [105.32    , 136.91333 , 139.8     , ...,  88.77    ,\n",
       "            89.90667 ,  89.64    ]],\n",
       " \n",
       "         ...,\n",
       " \n",
       "         [[104.253334, 135.57    , 120.67667 , ..., 249.21666 ,\n",
       "           278.88    , 280.25333 ],\n",
       "          [ 96.82333 , 124.14    , 148.01    , ..., 257.76    ,\n",
       "           263.37668 , 255.48    ],\n",
       "          [101.183334, 120.683334, 135.43666 , ..., 237.28667 ,\n",
       "           260.77    , 250.50333 ],\n",
       "          ...,\n",
       "          [168.90334 , 177.75    , 153.21    , ...,  75.58    ,\n",
       "            81.933334,  88.933334],\n",
       "          [150.90666 , 159.37    , 161.11    , ...,  80.98333 ,\n",
       "            75.96333 ,  92.346664],\n",
       "          [134.19    , 158.59666 , 142.31    , ...,  82.81    ,\n",
       "            90.13    ,  94.94    ]],\n",
       " \n",
       "         [[126.833336, 138.82    , 132.74    , ..., 309.29333 ,\n",
       "           305.81    , 278.87    ],\n",
       "          [113.00667 , 127.723335, 171.91    , ..., 289.11667 ,\n",
       "           302.11    , 298.26    ],\n",
       "          [117.52    , 127.363335, 136.80667 , ..., 250.39333 ,\n",
       "           289.51334 , 302.49335 ],\n",
       "          ...,\n",
       "          [134.75    , 173.78    , 169.04    , ...,  89.53667 ,\n",
       "            67.27333 ,  69.43667 ],\n",
       "          [138.35    , 182.27667 , 182.11667 , ...,  81.31333 ,\n",
       "            72.933334,  87.236664],\n",
       "          [140.90666 , 174.53334 , 163.04666 , ...,  82.58    ,\n",
       "            71.27    ,  78.19    ]],\n",
       " \n",
       "         [[129.24333 , 136.14667 , 125.22    , ..., 283.02667 ,\n",
       "           288.88333 , 265.22333 ],\n",
       "          [112.97667 , 136.62334 , 154.46333 , ..., 280.07333 ,\n",
       "           280.24335 , 271.28    ],\n",
       "          [115.996666, 143.51    , 146.41    , ..., 236.60333 ,\n",
       "           260.77335 , 282.38    ],\n",
       "          ...,\n",
       "          [165.29333 , 153.61333 , 144.52333 , ...,  82.096664,\n",
       "            85.93    ,  85.403336],\n",
       "          [134.71    , 161.40666 , 153.82333 , ...,  77.293335,\n",
       "            84.32333 , 112.6     ],\n",
       "          [123.9     , 142.58    , 161.44    , ...,  89.12334 ,\n",
       "            76.81    ,  78.113335]]],\n",
       " \n",
       " \n",
       "        [[[117.31    , 136.51334 , 118.333336, ..., 418.2     ,\n",
       "           437.41333 , 462.52667 ],\n",
       "          [126.72667 , 132.47333 , 135.47333 , ..., 406.29    ,\n",
       "           426.89667 , 453.17667 ],\n",
       "          [130.3     , 122.85333 , 120.64    , ..., 401.91666 ,\n",
       "           431.47333 , 462.03665 ],\n",
       "          ...,\n",
       "          [147.45    , 155.37334 , 149.17334 , ...,  53.17    ,\n",
       "            51.806667,  44.766666],\n",
       "          [140.26334 , 151.84    , 156.65    , ...,  56.95    ,\n",
       "            46.376667,  43.7     ],\n",
       "          [137.10333 , 154.23334 , 151.17    , ...,  45.183334,\n",
       "            39.366665,  46.206665]],\n",
       " \n",
       "         [[ 68.886665,  79.473335,  85.31    , ..., 179.99333 ,\n",
       "           208.45334 , 211.75    ],\n",
       "          [ 74.02333 ,  79.59333 ,  94.96667 , ..., 186.76    ,\n",
       "           196.13667 , 193.65    ],\n",
       "          [ 69.43667 ,  78.51    ,  98.236664, ..., 152.06667 ,\n",
       "           186.98666 , 189.66333 ],\n",
       "          ...,\n",
       "          [139.16667 , 149.30333 , 142.05667 , ...,  56.883335,\n",
       "            49.306667,  45.45    ],\n",
       "          [118.91    , 128.42334 , 134.6     , ...,  51.263332,\n",
       "            65.95    ,  57.283333],\n",
       "          [109.15    , 121.08    , 149.72    , ...,  51.763332,\n",
       "            55.183334,  51.306667]],\n",
       " \n",
       "         [[ 89.87    ,  94.91333 ,  75.92    , ..., 160.15666 ,\n",
       "           180.90334 , 182.74    ],\n",
       "          [ 83.136665,  79.886665,  81.69666 , ..., 180.36    ,\n",
       "           190.57    , 166.58667 ],\n",
       "          [ 85.28667 ,  85.99333 ,  84.93667 , ..., 149.57    ,\n",
       "           192.53334 , 179.65334 ],\n",
       "          ...,\n",
       "          [145.65666 , 145.47333 , 127.276665, ...,  70.04    ,\n",
       "            85.97    ,  82.69666 ],\n",
       "          [128.10667 , 158.08667 , 134.23666 , ...,  88.723335,\n",
       "            88.253334,  73.36667 ],\n",
       "          [134.56667 , 116.48    , 124.39    , ...,  83.11    ,\n",
       "            80.39333 ,  80.14    ]],\n",
       " \n",
       "         ...,\n",
       " \n",
       "         [[139.9     , 132.21333 , 143.20667 , ..., 272.52335 ,\n",
       "           282.32    , 301.93668 ],\n",
       "          [119.04667 , 125.90667 , 144.93666 , ..., 276.23666 ,\n",
       "           274.05334 , 295.67667 ],\n",
       "          [120.503334, 140.87    , 139.29333 , ..., 245.15666 ,\n",
       "           284.54666 , 315.88666 ],\n",
       "          ...,\n",
       "          [162.06334 , 191.1     , 158.66    , ..., 133.05    ,\n",
       "           144.46333 , 124.793335],\n",
       "          [138.21666 , 205.55333 , 196.53334 , ..., 141.27667 ,\n",
       "           149.49667 , 130.67    ],\n",
       "          [166.69667 , 187.59666 , 167.1     , ..., 123.15    ,\n",
       "           116.63333 , 116.19    ]],\n",
       " \n",
       "         [[129.77667 , 142.61667 , 128.19    , ..., 278.19333 ,\n",
       "           318.87668 , 325.53665 ],\n",
       "          [119.04    , 138.70334 , 129.49667 , ..., 303.49    ,\n",
       "           319.76    , 314.64    ],\n",
       "          [126.74333 , 141.53667 , 145.10667 , ..., 273.95    ,\n",
       "           307.13    , 319.60666 ],\n",
       "          ...,\n",
       "          [185.21333 , 192.18    , 165.25    , ...,  97.763336,\n",
       "           138.56667 , 129.24    ],\n",
       "          [145.51334 , 170.88    , 176.19667 , ..., 120.62666 ,\n",
       "           114.43    , 135.35    ],\n",
       "          [156.4     , 147.27    , 166.32333 , ..., 102.53333 ,\n",
       "           125.13333 , 141.57    ]],\n",
       " \n",
       "         [[117.08    , 117.74333 , 108.47667 , ..., 266.76334 ,\n",
       "           303.67667 , 300.38333 ],\n",
       "          [ 97.723335, 108.04    , 124.98333 , ..., 257.82333 ,\n",
       "           284.94    , 302.98334 ],\n",
       "          [100.833336, 101.76    , 115.7     , ..., 256.35    ,\n",
       "           285.42667 , 315.81332 ],\n",
       "          ...,\n",
       "          [128.80667 , 167.19    , 147.91667 , ..., 109.11667 ,\n",
       "           101.31333 ,  91.85333 ],\n",
       "          [113.166664, 148.28    , 170.32    , ...,  88.28333 ,\n",
       "           100.37    ,  88.636665],\n",
       "          [122.00667 , 144.22333 , 129.55667 , ...,  95.833336,\n",
       "            94.4     ,  84.98333 ]]]], dtype=float32),\n",
       " 'regDX': array([[0.        , 0.33925834, 1.11803401],\n",
       "        [0.        , 0.2966944 , 0.80622578],\n",
       "        [0.        , 0.25482228, 0.98488575],\n",
       "        [0.        , 0.18145472, 0.36055514],\n",
       "        [0.        , 0.29416427, 1.01980388],\n",
       "        [0.        , 0.44277123, 1.94164884],\n",
       "        [0.        , 0.43367335, 0.86023253],\n",
       "        [0.        , 0.42310792, 1.07703292],\n",
       "        [0.        , 0.7421639 , 2.22036052],\n",
       "        [0.        , 0.22052506, 0.72801095],\n",
       "        [0.        , 0.20909657, 0.56568545],\n",
       "        [0.        , 0.22919962, 0.63245553],\n",
       "        [0.        , 0.23898822, 0.67082042],\n",
       "        [0.        , 0.16511217, 0.41231057],\n",
       "        [0.        , 0.23602465, 0.53851646],\n",
       "        [0.        , 0.29116005, 0.76157731],\n",
       "        [0.        , 0.14360097, 0.41231057],\n",
       "        [0.        , 0.22187585, 0.98994946],\n",
       "        [0.        , 0.13449502, 1.02956295],\n",
       "        [0.        , 0.13344911, 0.40000001],\n",
       "        [0.        , 0.38366002, 1.47648227],\n",
       "        [0.        , 0.23847649, 0.50990194],\n",
       "        [0.        , 0.31064969, 0.86023253],\n",
       "        [0.        , 0.22794604, 0.89442724],\n",
       "        [0.        , 0.26166505, 0.72801095],\n",
       "        [0.        , 0.18842264, 0.44721362],\n",
       "        [0.        , 0.19900249, 0.50990194],\n",
       "        [0.        , 0.110293  , 0.31622776],\n",
       "        [0.        , 0.19484028, 0.67082042],\n",
       "        [0.        , 0.20143001, 0.70710677]]),\n",
       " 'Lyc': 494,\n",
       " 'Lxc': 496,\n",
       " 'max_proj': array([[ 458.29272,  463.09528,  589.3723 , ..., 1088.4231 , 1106.6278 ,\n",
       "         1195.9891 ],\n",
       "        [ 412.72095,  470.47662,  503.16998, ..., 1025.4072 , 1051.8951 ,\n",
       "         1102.9324 ],\n",
       "        [ 448.06744,  473.93552,  509.3069 , ..., 1075.5228 , 1053.9805 ,\n",
       "         1074.7214 ],\n",
       "        ...,\n",
       "        [ 619.5967 ,  669.1463 ,  688.1083 , ...,  220.58905,  148.54236,\n",
       "          174.57959],\n",
       "        [ 544.49054,  631.5219 ,  597.0902 , ...,  150.59314,  140.03844,\n",
       "          149.181  ],\n",
       "        [ 501.64355,  580.7329 ,  525.6721 , ...,  167.84431,  164.5453 ,\n",
       "          194.7751 ]], dtype=float32),\n",
       " 'Vmax': array([544.24432373, 425.04608154, 410.96011353, ...,   0.        ,\n",
       "          0.        ,   0.        ]),\n",
       " 'ihop': array([1., 1., 1., ..., 0., 0., 0.]),\n",
       " 'Vsplit': array([0.99547887, 1.03119838, 1.11834872, ..., 0.        , 0.        ,\n",
       "        0.        ]),\n",
       " 'Vcorr': array([[ 8.56670761,  8.56670761,  8.56670761, ..., 14.61773595,\n",
       "         13.62227058, 13.62227058],\n",
       "        [ 8.62333679,  8.88878441,  8.56670761, ..., 17.63501114,\n",
       "         15.1110803 , 13.62227058],\n",
       "        [ 8.56670761,  8.56670761,  8.56670761, ..., 19.06478942,\n",
       "         16.87938595, 14.72189916],\n",
       "        ...,\n",
       "        [ 5.05349922,  5.291502  ,  5.66901642, ...,  5.17744494,\n",
       "          4.58999729,  4.58999729],\n",
       "        [ 5.05349922,  5.94988728,  5.38719559, ...,  4.58999729,\n",
       "          5.69844675,  4.58999729],\n",
       "        [ 5.05349922,  5.05349922,  5.05349922, ...,  4.58999729,\n",
       "          4.58999729,  4.58999729]]),\n",
       " 'Vmap': [array([[ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ..., 25.148453, 23.744226,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ..., 30.296545, 22.667467,\n",
       "           0.      ],\n",
       "         ...,\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ]], dtype=float32),\n",
       "  array([[ 0.      ,  0.      , 23.122604, ..., 20.389763, 28.873795,\n",
       "          10.63866 ],\n",
       "         [ 0.      ,  0.      , 34.16201 , ..., 26.002893, 36.606396,\n",
       "          25.46211 ],\n",
       "         [ 0.      ,  0.      , 24.592402, ..., 11.210071, 19.750923,\n",
       "          10.806151],\n",
       "         ...,\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ]], dtype=float32),\n",
       "  array([[  0.      ,  60.973827, 115.87801 , ...,  19.820988,  21.515013,\n",
       "            0.      ],\n",
       "         [  0.      ,  49.942753, 135.81062 , ...,  25.370378,  29.147215,\n",
       "           21.83618 ],\n",
       "         [  0.      ,   0.      ,  56.054794, ...,  20.734127,  32.878292,\n",
       "           20.805685],\n",
       "         ...,\n",
       "         [  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,\n",
       "            0.      ],\n",
       "         [  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,\n",
       "            0.      ],\n",
       "         [  0.      ,   0.      ,   0.      , ...,   0.      ,   0.      ,\n",
       "            0.      ]], dtype=float32),\n",
       "  array([[ 0.      , 12.807495, 35.59454 , ..., 20.918184, 21.074291,\n",
       "          17.162472],\n",
       "         [ 0.      , 11.755073, 43.690525, ..., 12.610296, 13.309116,\n",
       "          16.659231],\n",
       "         [ 0.      ,  0.      , 11.302436, ..., 42.857433, 24.979958,\n",
       "          20.20845 ],\n",
       "         ...,\n",
       "         [22.619421, 18.38663 ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ],\n",
       "         [ 0.      ,  0.      ,  0.      , ...,  0.      ,  0.      ,\n",
       "           0.      ]], dtype=float32),\n",
       "  array([[  0.       ,  18.761265 ,  22.00155  ,  20.106363 ,  31.457918 ,\n",
       "           17.99521  ,  27.805702 ,  22.959528 ,  67.5127   ,  25.97459  ,\n",
       "           32.703026 ,  74.41162  ,  77.91727  ,  44.79754  ,   0.       ,\n",
       "            0.       ,  39.893223 ,  26.753466 ,  39.773632 ,  18.030586 ,\n",
       "           46.558167 ,  22.08241  ,  25.278173 ,  33.416092 ,  31.42634  ,\n",
       "           45.868927 ,  25.041973 ,  36.168198 ,   0.       ,  30.618185 ,\n",
       "           11.196726 ],\n",
       "         [  0.       ,   0.       ,  15.889307 ,  37.866627 ,  27.998209 ,\n",
       "           31.210688 ,  37.0064   ,  45.891594 ,  78.81539  ,  35.931118 ,\n",
       "           32.215298 ,  60.27749  ,  59.443836 ,  13.002179 ,   0.       ,\n",
       "            0.       ,  46.32305  ,  37.092934 ,  51.55094  ,  28.471247 ,\n",
       "           88.87431  ,  69.16025  ,  28.667269 ,  12.514505 ,  22.509735 ,\n",
       "           35.5407   ,  13.857132 ,  37.89423  ,  13.134527 ,  31.093699 ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,  19.105545 ,  55.446796 ,  69.75233  ,\n",
       "           60.038574 ,  45.82042  ,  45.931347 ,  42.82073  ,  19.491152 ,\n",
       "           19.604023 ,  89.13505  ,  41.904408 ,   0.       ,   0.       ,\n",
       "            0.       ,  21.79975  ,  26.976746 ,  42.35914  ,  34.890873 ,\n",
       "           64.7733   ,  33.799175 ,  63.375954 ,  70.537865 ,  42.327576 ,\n",
       "           50.923855 ,  35.638897 ,  60.568203 ,  35.986923 ,  22.5094   ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,   0.       ,  12.951279 ,  54.69571  ,\n",
       "           84.55392  ,  41.850338 ,  86.19817  ,  47.273956 ,  38.37253  ,\n",
       "           32.75303  ,  39.16079  ,   0.       ,   0.       ,  11.434719 ,\n",
       "           80.742584 ,  58.51306  ,  10.068825 ,  22.486538 ,  69.98205  ,\n",
       "           66.101074 ,  35.314816 ,  31.858385 ,  17.779354 ,  27.573975 ,\n",
       "           13.104621 ,  10.330398 ,  26.83389  ,  36.76979  ,  32.9714   ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,   0.       ,  43.204254 ,  35.000034 ,\n",
       "           61.071648 ,  43.637596 ,  78.8092   ,  46.642223 ,  49.50118  ,\n",
       "           51.85339  ,  26.671396 ,   0.       ,   0.       ,  10.147274 ,\n",
       "          106.665085 ,  54.602    ,  27.451935 ,  15.589963 ,  35.380974 ,\n",
       "           13.684361 ,  21.411234 ,  23.960522 ,  37.22175  ,  28.106092 ,\n",
       "           25.845469 ,  22.442015 ,  37.089752 ,  61.341656 ,  33.164642 ,\n",
       "           18.989178 ],\n",
       "         [  0.       ,   0.       ,   0.       ,  29.705914 ,  75.97761  ,\n",
       "          120.03745  ,  36.083984 ,  74.84977  ,  79.92401  , 123.79953  ,\n",
       "           63.542423 ,  15.404969 ,  20.735775 ,   0.       ,  27.085281 ,\n",
       "           73.916275 ,  30.180313 ,  29.184595 ,  23.79657  ,  56.44945  ,\n",
       "           40.87944  ,  25.083975 ,  10.042647 ,  27.349155 ,  34.647503 ,\n",
       "           27.09013  ,  18.940546 ,  17.822775 ,  21.821684 ,  42.90886  ,\n",
       "           16.732117 ],\n",
       "         [  0.       ,   0.       ,  16.12358  ,  43.80721  , 135.52042  ,\n",
       "          159.33096  , 102.74628  ,  38.847992 ,  64.08926  ,  93.27484  ,\n",
       "           31.575274 ,   0.       ,  36.73037  ,  10.4765   ,  20.796688 ,\n",
       "           58.90999  ,  41.28404  ,  39.649246 ,  28.220493 ,  33.67499  ,\n",
       "           11.890762 ,  27.202375 ,  84.52475  ,  58.474457 ,  57.446598 ,\n",
       "           66.725    ,  70.834305 ,  34.99508  ,  45.65519  ,  48.998028 ,\n",
       "           33.911766 ],\n",
       "         [  0.       ,   0.       ,   0.       ,  18.008604 ,  37.641056 ,\n",
       "           29.577116 ,  30.554024 ,  25.501987 ,  88.034035 ,  75.03446  ,\n",
       "           24.535976 ,   0.       ,  15.692905 ,  21.148823 ,  43.98922  ,\n",
       "           85.98492  ,  46.876385 ,  51.4659   ,  47.162296 ,  50.889503 ,\n",
       "           39.749195 ,  45.148643 ,  35.60301  ,  44.323734 ,  44.712437 ,\n",
       "           56.385937 ,  37.878334 ,  22.514725 ,  80.53554  ,  55.671318 ,\n",
       "           23.175415 ],\n",
       "         [  0.       ,   0.       ,  10.256237 ,  23.191038 ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,  57.65718  ,  19.237274 ,\n",
       "            0.       ,   0.       ,  13.198662 ,  48.6327   ,  44.997364 ,\n",
       "          113.92365  ,  46.466045 ,  72.333084 ,  56.206753 ,  61.566685 ,\n",
       "           50.24183  ,  52.353756 ,  42.206673 ,  49.842495 ,  45.605877 ,\n",
       "           40.034145 ,  36.13802  ,  21.947565 ,  30.383896 ,  19.626316 ,\n",
       "           15.6971855],\n",
       "         [  0.       ,   0.       ,  14.943319 ,  20.315891 ,  11.092508 ,\n",
       "            0.       ,   0.       ,  11.951464 ,  14.545294 ,   0.       ,\n",
       "            0.       ,  15.447489 ,  30.17128  ,  45.653877 ,  31.771915 ,\n",
       "           39.475025 ,  48.38519  ,  97.57856  ,  70.784874 ,  49.339314 ,\n",
       "           36.203506 ,  45.126854 ,  58.03036  ,  48.44668  ,  34.326054 ,\n",
       "           20.798355 ,  24.854729 ,  23.26571  ,  30.352905 ,  23.848442 ,\n",
       "           15.95392  ],\n",
       "         [  0.       ,   0.       ,  22.728083 ,  36.54725  ,  22.815332 ,\n",
       "           12.600178 ,   0.       ,  12.2020645,  10.900231 ,   0.       ,\n",
       "            0.       ,  18.946835 ,  71.625206 ,  47.389957 ,  33.905098 ,\n",
       "           36.503983 ,  36.663177 ,  67.34269  ,  60.24297  ,  59.704277 ,\n",
       "           43.837112 ,  54.632523 ,  72.18209  ,  43.334446 ,  36.803596 ,\n",
       "           12.46697  ,  31.010822 ,  32.08981  ,  24.267569 ,  26.31773  ,\n",
       "           14.205252 ],\n",
       "         [ 12.415798 ,  22.179655 ,  40.28706  ,  70.733246 ,  45.976845 ,\n",
       "           15.367744 ,  10.765518 ,  19.17331  ,  20.989594 ,   0.       ,\n",
       "           16.940937 ,  22.014372 ,  60.527145 ,  48.575287 ,  44.873466 ,\n",
       "           36.98361  ,  32.90341  ,  56.18464  ,  36.599037 ,  32.541187 ,\n",
       "           22.995617 ,  33.40358  ,  41.268433 ,  29.26771  ,  42.17862  ,\n",
       "           29.699398 ,  49.418747 ,  34.054085 ,  31.691277 ,  39.46365  ,\n",
       "           26.664072 ],\n",
       "         [ 20.650377 ,  31.5019   ,  19.80476  ,  17.834845 ,   0.       ,\n",
       "           11.243249 ,  21.004097 ,  33.937267 ,  34.570484 ,  14.8726425,\n",
       "           19.466679 ,  24.94124  ,  64.13373  ,  62.453747 ,  56.201878 ,\n",
       "           39.288147 ,  49.11496  ,  49.559643 ,  51.781067 ,  52.13033  ,\n",
       "           69.369606 ,  67.112434 ,  59.32581  ,  41.05275  ,  51.665318 ,\n",
       "           41.544285 ,  59.189323 ,  36.45694  ,  37.24715  ,  37.08217  ,\n",
       "           30.871262 ],\n",
       "         [ 73.68833  ,  72.83313  ,  46.720818 ,  22.842861 ,  10.706368 ,\n",
       "           26.221462 ,  29.644278 ,  60.330868 ,  33.24753  ,  15.645941 ,\n",
       "           19.726418 ,  30.158867 ,  58.787712 ,  62.116245 ,  77.67166  ,\n",
       "           74.466675 ,  88.32849  ,  65.13905  ,  42.919373 ,  31.354347 ,\n",
       "           43.751274 ,  44.326294 ,  56.69054  ,  41.900967 ,  60.17963  ,\n",
       "           49.41677  ,  65.14522  ,  43.092133 ,  29.558516 ,  25.482983 ,\n",
       "           30.73054  ],\n",
       "         [ 13.020716 ,  27.34724  ,  40.140205 ,  20.155624 ,  32.174774 ,\n",
       "           56.04063  ,  53.90798  ,  67.00694  ,  20.946318 ,  30.36067  ,\n",
       "           50.926823 ,  56.70052  ,  65.39784  ,  57.883133 ,  74.21626  ,\n",
       "           81.24211  , 107.921875 ,  95.31582  ,  63.307045 ,  36.27327  ,\n",
       "           40.20667  ,  46.316204 ,  55.129314 ,  44.933735 ,  51.42051  ,\n",
       "           45.037663 ,  52.088474 ,  40.505413 ,  36.676994 ,  50.82425  ,\n",
       "           47.347218 ],\n",
       "         [  0.       ,  14.254572 ,  12.756462 ,  27.333847 ,  88.414406 ,\n",
       "           56.557953 ,  42.787914 ,  34.31327  ,  33.14932  ,  62.234585 ,\n",
       "           89.91793  ,  79.488884 ,  83.20377  ,  53.7662   ,  69.51782  ,\n",
       "           56.061245 ,  69.1291   ,  61.856358 ,  21.744175 ,  25.660513 ,\n",
       "            0.       ,  33.505833 ,  53.59767  ,  53.598907 ,  56.61656  ,\n",
       "           46.451965 ,  40.940727 ,  34.242485 ,  27.516453 ,  26.344011 ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,  18.546104 ,  36.564713 ,  45.84534  ,\n",
       "            0.       ,   0.       ,  18.260416 ,  87.69083  ,  74.11969  ,\n",
       "          111.75257  ,  66.37363  ,  52.041443 ,  12.619892 ,  21.150396 ,\n",
       "           22.890997 ,  51.84068  ,  72.282394 ,  25.026175 ,   0.       ,\n",
       "            0.       ,  21.175545 ,  23.335567 ,  32.922916 ,  45.002266 ,\n",
       "           54.604027 ,  42.660576 ,  27.103464 ,  19.974123 ,  21.852142 ,\n",
       "            0.       ],\n",
       "         [ 26.09762  ,   0.       ,  14.429226 ,   0.       ,   0.       ,\n",
       "            0.       ,  13.387272 ,  51.04614  , 102.92584  ,  81.83338  ,\n",
       "           78.45017  ,  54.45624  ,  48.19962  ,  20.947622 ,  13.310457 ,\n",
       "           11.487244 ,  18.69836  ,  49.52861  ,  18.11824  ,  15.17062  ,\n",
       "           22.62213  ,  38.891678 ,  52.026188 ,  57.005016 ,  62.450703 ,\n",
       "           56.280834 ,  56.293064 ,  41.676464 ,  45.163937 ,  17.143925 ,\n",
       "            0.       ],\n",
       "         [ 69.2023   ,  45.039143 ,  55.902893 ,  11.05204  ,   0.       ,\n",
       "            0.       ,  29.517735 ,  87.63849  , 113.8917   ,  51.189655 ,\n",
       "           42.392963 ,  36.309063 ,  31.309158 ,  30.220482 ,  32.288418 ,\n",
       "           30.90326  ,  34.732376 ,  34.15919  ,  28.271446 ,  19.721619 ,\n",
       "           30.168718 ,  41.933464 ,  42.43278  ,  30.222301 ,  49.654083 ,\n",
       "           40.82311  ,  60.85302  ,  55.470646 ,  56.86636  ,  29.072601 ,\n",
       "            0.       ],\n",
       "         [ 51.31906  ,  39.408813 ,  83.5      ,  49.80349  ,  60.469414 ,\n",
       "           48.037983 ,  45.27676  ,  75.21179  ,  31.432724 ,  40.231922 ,\n",
       "           33.33812  ,  28.125282 ,  51.62141  ,  30.795444 ,  19.669012 ,\n",
       "           15.096413 ,  34.983948 ,  35.408955 ,  57.472977 , 101.00325  ,\n",
       "           47.860912 ,  62.187714 ,  25.056152 ,  47.735107 ,  34.697876 ,\n",
       "           46.761932 ,  36.07154  ,  38.886765 ,  16.448402 ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 36.575233 ,  15.004146 ,  65.10667  ,  35.94373  ,  43.60637  ,\n",
       "           28.609274 ,  10.350796 ,  84.091576 ,  46.850124 ,  57.395676 ,\n",
       "           56.469635 ,  14.328652 ,  44.849834 ,  15.821119 ,  40.797646 ,\n",
       "           25.726791 ,  28.025984 ,  23.909845 ,  32.93551  ,  30.149992 ,\n",
       "           30.56912  ,  42.578205 ,  38.922474 ,  58.99219  ,  19.601097 ,\n",
       "           20.381102 ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 43.74546  ,  32.38469  ,  47.736877 ,  33.801086 ,  24.081137 ,\n",
       "           12.182896 ,   0.       ,  19.05047  ,  12.183497 ,  27.165195 ,\n",
       "           24.599052 ,  16.693968 ,  20.222195 ,  17.012455 ,  52.180542 ,\n",
       "           33.2982   ,  32.71403  ,  35.016582 ,  36.288067 ,  26.527443 ,\n",
       "           40.014294 ,  33.828037 ,  26.525133 ,  19.702091 ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 49.69824  ,  39.516964 ,  31.188408 ,  26.918964 ,   0.       ,\n",
       "            0.       ,   0.       ,  18.505878 ,  12.468141 ,  14.049125 ,\n",
       "           50.826515 ,   0.       ,  19.151745 ,  15.160233 ,  41.003994 ,\n",
       "           24.800297 ,  25.76484  ,  28.67309  ,  47.285294 ,  23.727394 ,\n",
       "           21.46927  ,  28.968851 ,   0.       ,  14.954822 ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 49.704754 ,  47.20818  ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "           17.729279 ,  17.599442 ,  50.23716  ,  39.016808 ,  42.02624  ,\n",
       "           42.25864  ,  58.123146 ,  41.62897  ,  49.37666  ,  18.239134 ,\n",
       "            0.       ,  11.025133 ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 62.078747 ,  60.143616 ,  23.276524 ,  24.717758 ,  22.978292 ,\n",
       "           10.960012 ,  11.229352 ,  12.934702 ,  53.534874 ,  54.600044 ,\n",
       "           45.671627 ,  29.377514 ,  45.58333  ,  31.234728 ,  55.60468  ,\n",
       "           42.841145 ,  78.4407   ,  50.08436  ,  21.816065 ,   0.       ,\n",
       "            0.       ,  14.923934 ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 37.65311  ,  34.476532 ,  21.753775 ,  21.979464 ,  28.30353  ,\n",
       "            0.       ,  12.026232 ,   0.       ,  31.215992 ,  39.304512 ,\n",
       "           64.60065  ,  11.7430525,  24.881798 ,  20.760872 ,  73.585915 ,\n",
       "           54.400772 ,  51.92013  ,  20.653893 ,  10.239027 ,  16.149317 ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,  10.042473 ,   0.       ,  11.338436 ,  15.213412 ,\n",
       "           15.844808 ],\n",
       "         [  0.       ,  19.078972 ,  27.77968  ,  30.989094 ,  54.33296  ,\n",
       "            0.       ,  13.461093 ,   0.       ,  11.069255 ,   0.       ,\n",
       "           21.951103 ,   0.       ,  15.719333 ,  23.344418 ,  76.51987  ,\n",
       "           35.987278 ,  25.11747  ,   0.       ,  15.156668 ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,  28.900726 ,  55.672203 ,  54.48396  ,\n",
       "           34.622555 ],\n",
       "         [ 17.740337 ,  23.67508  ,  41.108585 ,  28.646248 ,  34.675606 ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "           25.658663 ,  11.66374  ,  25.59551  ,   0.       ,  18.080381 ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,  27.093662 ,   0.       ,\n",
       "            0.       ],\n",
       "         [ 13.67132  ,  22.655464 ,  71.59811  ,  28.375526 ,  23.769104 ,\n",
       "            0.       ,   0.       ,  12.166921 ,   0.       ,  17.340382 ,\n",
       "           15.418265 ,  20.931238 ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,  46.89845  ,\n",
       "           48.228558 ,  37.01589  ,  35.522602 ,  26.637213 ,   0.       ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,  35.08596  ,   0.       ,  21.843304 ,\n",
       "            0.       ,  26.014463 ,  39.36237  ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,  10.372042 ,   0.       ,\n",
       "            0.       ],\n",
       "         [  0.       ,   0.       ,   0.       ,   0.       ,  17.737555 ,\n",
       "           13.628258 ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ,   0.       ,   0.       ,   0.       ,   0.       ,\n",
       "            0.       ]], dtype=float32)],\n",
       " 'spatscale_pix': array([12]),\n",
       " 'meanImgE': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]], dtype=float32),\n",
       " 'timing': {'registration': 11319.762184858322,\n",
       "  'registration_metrics': 34.16234278678894,\n",
       "  'detection': 671.0295331478119,\n",
       "  'extraction': 867.5214445590973,\n",
       "  'classification': 0.08369636535644531,\n",
       "  'deconvolution': 24.275188446044922,\n",
       "  'total_plane_runtime': 12946.64022898674}}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# meta-information about the Suite2p run:\n",
    "trialobj.Suite2p.output_ops"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e42cb791",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Annotated Data\n",
    "\n",
    "The AnnData library is the primary protocol that is used to store imaging data in an efficient, multi-functional format. It is created using the `anndata` sub-module and can be accessed using `trialobj.data`. By default, `trialobj.data` is a data array generated from Suite2p processed data.\n",
    "For all guidance on AnnData objects, visit: https://anndata.readthedocs.io/en/latest/index.html.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9142e80c",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "The AnnData object is built around the raw Flu matrix of each `trialobj` . In keeping with AnnData conventions, the data structure is organized in *n* observations (obs) x *m* variables (var), where observations are suite2p ROIs and variables are imaging frame timepoints.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "206ed41e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Annotated Data of n_obs × n_vars = 640 × 16368 \n",
      "available attributes: \n",
      "\t.X (primary datamatrix) of .data_label: \n",
      "\t\t|- suite2p raw - neuropil corrected\n",
      "\t.obs (obs metadata): \n",
      "\t\t|- 'ypix', 'xpix', 'lam', 'footprint', 'mrs', 'mrs0', 'compact', 'med', 'npix', 'overlap', 'radius', 'aspect_ratio', 'npix_norm', 'skew', 'std'\n",
      "\t.var (vars metadata): \n",
      "\t\t|- 'frame_clock', 'x_galvo_uncaging', 'slm2packio', 'markpoints2packio', 'packio2slm', 'packio2markpoints', 'pycontrol_rsync', 'voltage'\n",
      "\t.obsm: \n",
      "\t\t|- 'ypix', 'xpix'\n"
     ]
    }
   ],
   "source": [
    "print(trialobj.data)  # this is the anndata object for this trial"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5340deb3",
   "metadata": {},
   "source": [
    "### storage of Flu data\n",
    "\n",
    "The raw data is stored in `.X`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "da80d099",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[352.13678  411.9472   280.92416  ... 401.3014   515.2566   541.41565 ]\n",
      " [192.22421  395.29306  330.7496   ... 257.25806  285.31506  126.660484]\n",
      " [336.64996  539.26746  219.30368  ... 423.15295  433.1515   220.52742 ]\n",
      " ...\n",
      " [308.56497  303.55536  413.3554   ... 482.61044  386.2576   283.1643  ]\n",
      " [133.96815  122.96908   84.63106  ... 109.2256   187.91866  159.50813 ]\n",
      " [252.49574  240.2455   273.2785   ... 181.601    229.0061   278.74188 ]]\n",
      "shape:  (640, 16368)\n"
     ]
    }
   ],
   "source": [
    "print(trialobj.data.X)\n",
    "\n",
    "print('shape: ', trialobj.data.X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe1f2b7b",
   "metadata": {},
   "source": [
    "Processed data is added to `trialobj.data` as a unique `layers` key. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a206f83b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Layers with keys: "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trialobj.data.layers\n",
    "\n",
    "# NOTE: we haven't added any layers to this dataset yet."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0462cc2a",
   "metadata": {},
   "source": [
    "The entire AnnData data object is built according to the dimensions of the original Flu data input."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b903254a",
   "metadata": {},
   "source": [
    "### observations (Suite2p ROIs metadata and associated processing info)\n",
    "\n",
    "For instance, the metadata for each suite2p ROI stored in Suite2p’s stat.npy output is added to `trialobject.data` under `obs` and `obsm` (1D and >1-D observations annotations, respectively)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7f175c34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ypix</th>\n",
       "      <th>xpix</th>\n",
       "      <th>lam</th>\n",
       "      <th>footprint</th>\n",
       "      <th>mrs</th>\n",
       "      <th>...</th>\n",
       "      <th>radius</th>\n",
       "      <th>aspect_ratio</th>\n",
       "      <th>npix_norm</th>\n",
       "      <th>skew</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[102, 102, 102, 102, 102, 103, 103, 103, 103, ...</td>\n",
       "      <td>[457, 458, 459, 460, 461, 456, 457, 458, 459, ...</td>\n",
       "      <td>[0.0063846777, 0.008958542, 0.011363007, 0.011...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.909815</td>\n",
       "      <td>...</td>\n",
       "      <td>3.565604</td>\n",
       "      <td>1.051397</td>\n",
       "      <td>0.649175</td>\n",
       "      <td>3.016955</td>\n",
       "      <td>353.675049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 4...</td>\n",
       "      <td>[116, 117, 118, 119, 120, 121, 114, 115, 116, ...</td>\n",
       "      <td>[0.009095913, 0.014569374, 0.01832514, 0.01890...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.912076</td>\n",
       "      <td>...</td>\n",
       "      <td>3.538468</td>\n",
       "      <td>1.074428</td>\n",
       "      <td>0.622126</td>\n",
       "      <td>3.784652</td>\n",
       "      <td>422.922577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 1...</td>\n",
       "      <td>[202, 203, 204, 205, 200, 201, 202, 203, 204, ...</td>\n",
       "      <td>[0.00545189, 0.006088022, 0.0062021483, 0.0052...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.088559</td>\n",
       "      <td>...</td>\n",
       "      <td>4.124215</td>\n",
       "      <td>1.027475</td>\n",
       "      <td>0.919665</td>\n",
       "      <td>3.603348</td>\n",
       "      <td>342.368134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[43, 44, 45, 46, 46, 47, 47, 47, 48, 48, 48, 4...</td>\n",
       "      <td>[352, 352, 352, 352, 353, 352, 353, 354, 351, ...</td>\n",
       "      <td>[0.0036495698, 0.0043396214, 0.0031816224, 0.0...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.561322</td>\n",
       "      <td>...</td>\n",
       "      <td>8.133019</td>\n",
       "      <td>1.348522</td>\n",
       "      <td>1.325399</td>\n",
       "      <td>3.187822</td>\n",
       "      <td>357.666168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[156, 156, 156, 156, 156, 157, 157, 157, 157, ...</td>\n",
       "      <td>[382, 383, 384, 385, 386, 380, 381, 382, 383, ...</td>\n",
       "      <td>[0.013304887, 0.02187323, 0.023734575, 0.01969...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.869808</td>\n",
       "      <td>...</td>\n",
       "      <td>3.62042</td>\n",
       "      <td>1.139261</td>\n",
       "      <td>0.554504</td>\n",
       "      <td>2.59998</td>\n",
       "      <td>263.609039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1241</th>\n",
       "      <td>[290, 291, 291, 291, 291, 291, 291, 291, 291, ...</td>\n",
       "      <td>[299, 298, 299, 300, 301, 302, 305, 306, 307, ...</td>\n",
       "      <td>[0.0029507184, 0.0032565512, 0.005071437, 0.00...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.336259</td>\n",
       "      <td>...</td>\n",
       "      <td>11.46564</td>\n",
       "      <td>1.251471</td>\n",
       "      <td>2.447931</td>\n",
       "      <td>2.540658</td>\n",
       "      <td>94.641136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1242</th>\n",
       "      <td>[354, 354, 355, 355, 355, 355, 355, 356, 356, ...</td>\n",
       "      <td>[309, 310, 308, 309, 310, 311, 312, 307, 308, ...</td>\n",
       "      <td>[0.00252066, 0.0021455055, 0.007094776, 0.0078...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.386548</td>\n",
       "      <td>...</td>\n",
       "      <td>10.831544</td>\n",
       "      <td>1.129317</td>\n",
       "      <td>2.934812</td>\n",
       "      <td>2.229956</td>\n",
       "      <td>79.882561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1246</th>\n",
       "      <td>[15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 1...</td>\n",
       "      <td>[488, 489, 486, 487, 489, 486, 487, 488, 489, ...</td>\n",
       "      <td>[0.010669279, 0.007242187, 0.013514522, 0.0124...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.238235</td>\n",
       "      <td>...</td>\n",
       "      <td>13.789857</td>\n",
       "      <td>1.460301</td>\n",
       "      <td>1.636462</td>\n",
       "      <td>4.38241</td>\n",
       "      <td>55.825489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1250</th>\n",
       "      <td>[472, 472, 472, 473, 473, 473, 473, 473, 473, ...</td>\n",
       "      <td>[55, 56, 67, 55, 56, 57, 63, 64, 65, 66, 67, 6...</td>\n",
       "      <td>[0.0023643558, 0.0034383552, 0.0021977199, 0.0...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.079421</td>\n",
       "      <td>...</td>\n",
       "      <td>10.794925</td>\n",
       "      <td>1.331867</td>\n",
       "      <td>2.583175</td>\n",
       "      <td>1.233372</td>\n",
       "      <td>64.879417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1251</th>\n",
       "      <td>[342, 342, 342, 343, 343, 343, 343, 343, 344, ...</td>\n",
       "      <td>[128, 129, 130, 126, 127, 128, 129, 130, 124, ...</td>\n",
       "      <td>[0.010067902, 0.007827523, 0.005219734, 0.0070...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.777428</td>\n",
       "      <td>...</td>\n",
       "      <td>8.44572</td>\n",
       "      <td>1.100779</td>\n",
       "      <td>1.744658</td>\n",
       "      <td>2.057152</td>\n",
       "      <td>62.520458</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>640 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   ypix                                               xpix                                                lam footprint       mrs  ...     radius aspect_ratio npix_norm      skew         std\n",
       "0     [102, 102, 102, 102, 102, 103, 103, 103, 103, ...  [457, 458, 459, 460, 461, 456, 457, 458, 459, ...  [0.0063846777, 0.008958542, 0.011363007, 0.011...       1.0  0.909815  ...   3.565604     1.051397  0.649175  3.016955  353.675049\n",
       "1     [46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 4...  [116, 117, 118, 119, 120, 121, 114, 115, 116, ...  [0.009095913, 0.014569374, 0.01832514, 0.01890...       1.0  0.912076  ...   3.538468     1.074428  0.622126  3.784652  422.922577\n",
       "2     [18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 1...  [202, 203, 204, 205, 200, 201, 202, 203, 204, ...  [0.00545189, 0.006088022, 0.0062021483, 0.0052...       1.0  1.088559  ...   4.124215     1.027475  0.919665  3.603348  342.368134\n",
       "3     [43, 44, 45, 46, 46, 47, 47, 47, 48, 48, 48, 4...  [352, 352, 352, 352, 353, 352, 353, 354, 351, ...  [0.0036495698, 0.0043396214, 0.0031816224, 0.0...       1.0  1.561322  ...   8.133019     1.348522  1.325399  3.187822  357.666168\n",
       "4     [156, 156, 156, 156, 156, 157, 157, 157, 157, ...  [382, 383, 384, 385, 386, 380, 381, 382, 383, ...  [0.013304887, 0.02187323, 0.023734575, 0.01969...       1.0  0.869808  ...    3.62042     1.139261  0.554504   2.59998  263.609039\n",
       "...                                                 ...                                                ...                                                ...       ...       ...  ...        ...          ...       ...       ...         ...\n",
       "1241  [290, 291, 291, 291, 291, 291, 291, 291, 291, ...  [299, 298, 299, 300, 301, 302, 305, 306, 307, ...  [0.0029507184, 0.0032565512, 0.005071437, 0.00...       2.0  2.336259  ...   11.46564     1.251471  2.447931  2.540658   94.641136\n",
       "1242  [354, 354, 355, 355, 355, 355, 355, 356, 356, ...  [309, 310, 308, 309, 310, 311, 312, 307, 308, ...  [0.00252066, 0.0021455055, 0.007094776, 0.0078...       2.0  2.386548  ...  10.831544     1.129317  2.934812  2.229956   79.882561\n",
       "1246  [15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17, 1...  [488, 489, 486, 487, 489, 486, 487, 488, 489, ...  [0.010669279, 0.007242187, 0.013514522, 0.0124...       2.0  2.238235  ...  13.789857     1.460301  1.636462   4.38241   55.825489\n",
       "1250  [472, 472, 472, 473, 473, 473, 473, 473, 473, ...  [55, 56, 67, 55, 56, 57, 63, 64, 65, 66, 67, 6...  [0.0023643558, 0.0034383552, 0.0021977199, 0.0...       2.0  2.079421  ...  10.794925     1.331867  2.583175  1.233372   64.879417\n",
       "1251  [342, 342, 342, 343, 343, 343, 343, 343, 344, ...  [128, 129, 130, 126, 127, 128, 129, 130, 124, ...  [0.010067902, 0.007827523, 0.005219734, 0.0070...       2.0  1.777428  ...    8.44572     1.100779  1.744658  2.057152   62.520458\n",
       "\n",
       "[640 rows x 15 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trialobj.data.obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "238e0f00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AxisArrays with keys: ypix, xpix"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trialobj.data.obsm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03172051",
   "metadata": {},
   "source": [
    "The `.obsm` includes the ypix and xpix outputs for each suite2p ROI which represent the pixel locations of the ROI mask."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "60d6b740",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ypix: [array([102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 104,\n",
      "       104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105,\n",
      "       105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107,\n",
      "       107, 107, 107, 107, 108, 108, 108, 108, 108])\n",
      " array([46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48,\n",
      "       48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50,\n",
      "       50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52])\n",
      " array([18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20,\n",
      "       20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22,\n",
      "       22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24,\n",
      "       24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26])\n",
      " array([43, 44, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49,\n",
      "       49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52,\n",
      "       52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53,\n",
      "       53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55,\n",
      "       55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 57,\n",
      "       57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59])\n",
      " array([156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157,\n",
      "       158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159,\n",
      "       159, 159, 159, 160, 160, 160, 160, 160, 160, 160, 161, 161, 161,\n",
      "       161, 161])] \n",
      "\n",
      "xpix: \t [array([457, 458, 459, 460, 461, 456, 457, 458, 459, 460, 461, 462, 455,\n",
      "       456, 457, 458, 459, 460, 461, 462, 455, 456, 457, 458, 459, 460,\n",
      "       461, 462, 455, 456, 457, 458, 459, 460, 461, 462, 456, 457, 458,\n",
      "       459, 460, 461, 462, 457, 458, 459, 460, 461])\n",
      " array([116, 117, 118, 119, 120, 121, 114, 115, 116, 117, 118, 119, 120,\n",
      "       121, 122, 115, 116, 117, 118, 119, 120, 121, 122, 115, 116, 117,\n",
      "       118, 119, 120, 121, 122, 116, 117, 118, 119, 120, 121, 122, 117,\n",
      "       118, 119, 120, 121, 118, 119, 120])\n",
      " array([202, 203, 204, 205, 200, 201, 202, 203, 204, 205, 206, 207, 200,\n",
      "       201, 202, 203, 204, 205, 206, 207, 208, 200, 201, 202, 203, 204,\n",
      "       205, 206, 207, 208, 209, 199, 200, 201, 202, 203, 204, 205, 206,\n",
      "       207, 208, 200, 201, 202, 203, 204, 205, 206, 207, 200, 201, 202,\n",
      "       203, 204, 205, 206, 207, 201, 202, 203, 204, 205, 206, 207, 202,\n",
      "       203, 204, 205])\n",
      " array([352, 352, 352, 352, 353, 352, 353, 354, 351, 352, 353, 354, 355,\n",
      "       350, 351, 352, 353, 354, 355, 350, 351, 352, 353, 354, 355, 356,\n",
      "       349, 350, 351, 352, 353, 354, 355, 349, 350, 351, 352, 353, 354,\n",
      "       355, 357, 358, 359, 360, 361, 350, 351, 352, 353, 354, 355, 356,\n",
      "       357, 358, 359, 360, 361, 352, 353, 354, 355, 356, 357, 358, 359,\n",
      "       360, 361, 354, 355, 356, 357, 358, 359, 360, 361, 362, 354, 355,\n",
      "       356, 357, 358, 359, 360, 361, 355, 356, 357, 358, 359, 360, 361,\n",
      "       357, 358, 359, 360, 361, 358, 359])\n",
      " array([382, 383, 384, 385, 386, 380, 381, 382, 383, 384, 385, 386, 387,\n",
      "       380, 381, 382, 383, 384, 385, 386, 387, 380, 381, 382, 383, 384,\n",
      "       385, 386, 387, 380, 381, 382, 383, 384, 385, 386, 381, 382, 383,\n",
      "       384, 385])]\n"
     ]
    }
   ],
   "source": [
    "print('ypix:', trialobj.data.obsm['ypix'][:5], '\\n\\nxpix: \\t', trialobj.data.obsm['xpix'][:5])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7010f9",
   "metadata": {},
   "source": [
    "### variables (temporal synchronization of paq channels and imaging)\n",
    "\n",
    "And the temporal synchronization data of the experiment collected in .paq output is added to the variables annotations under `var`. These variables are timed to the imaging frame clock timings. The total # of variables is the number of imaging frames in the original Flu data input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "efc83490",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>frame_clock</th>\n",
       "      <th>x_galvo_uncaging</th>\n",
       "      <th>slm2packio</th>\n",
       "      <th>markpoints2packio</th>\n",
       "      <th>packio2slm</th>\n",
       "      <th>packio2markpoints</th>\n",
       "      <th>pycontrol_rsync</th>\n",
       "      <th>voltage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>139577</th>\n",
       "      <td>4.972792</td>\n",
       "      <td>-1.165180</td>\n",
       "      <td>3.329534</td>\n",
       "      <td>0.007827</td>\n",
       "      <td>0.000264</td>\n",
       "      <td>0.000592</td>\n",
       "      <td>0.017035</td>\n",
       "      <td>-0.116807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140252</th>\n",
       "      <td>4.974765</td>\n",
       "      <td>-1.164851</td>\n",
       "      <td>3.325917</td>\n",
       "      <td>0.007827</td>\n",
       "      <td>-0.000394</td>\n",
       "      <td>-0.000394</td>\n",
       "      <td>0.019666</td>\n",
       "      <td>-0.196060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140925</th>\n",
       "      <td>4.971806</td>\n",
       "      <td>-1.165180</td>\n",
       "      <td>3.337755</td>\n",
       "      <td>0.008156</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>0.000592</td>\n",
       "      <td>0.021310</td>\n",
       "      <td>-0.210858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141595</th>\n",
       "      <td>4.970819</td>\n",
       "      <td>-1.164851</td>\n",
       "      <td>3.331507</td>\n",
       "      <td>0.007827</td>\n",
       "      <td>0.000592</td>\n",
       "      <td>0.000264</td>\n",
       "      <td>0.021310</td>\n",
       "      <td>-0.204939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142267</th>\n",
       "      <td>4.975094</td>\n",
       "      <td>-1.166166</td>\n",
       "      <td>3.340715</td>\n",
       "      <td>0.006841</td>\n",
       "      <td>0.000264</td>\n",
       "      <td>0.001250</td>\n",
       "      <td>0.021639</td>\n",
       "      <td>-0.234206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11136216</th>\n",
       "      <td>4.974436</td>\n",
       "      <td>-1.165837</td>\n",
       "      <td>3.337426</td>\n",
       "      <td>0.006841</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>0.002565</td>\n",
       "      <td>0.021639</td>\n",
       "      <td>2.423554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11136886</th>\n",
       "      <td>4.975751</td>\n",
       "      <td>-1.164851</td>\n",
       "      <td>3.334138</td>\n",
       "      <td>0.012102</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>0.017035</td>\n",
       "      <td>2.473211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11137559</th>\n",
       "      <td>4.960953</td>\n",
       "      <td>-1.164851</td>\n",
       "      <td>3.337097</td>\n",
       "      <td>0.008485</td>\n",
       "      <td>0.000264</td>\n",
       "      <td>0.000921</td>\n",
       "      <td>0.019994</td>\n",
       "      <td>2.473211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11138232</th>\n",
       "      <td>4.971477</td>\n",
       "      <td>-1.167153</td>\n",
       "      <td>3.319340</td>\n",
       "      <td>0.006183</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>-0.000065</td>\n",
       "      <td>0.005525</td>\n",
       "      <td>2.466963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11138904</th>\n",
       "      <td>4.975751</td>\n",
       "      <td>-1.164851</td>\n",
       "      <td>3.329863</td>\n",
       "      <td>0.009471</td>\n",
       "      <td>0.000264</td>\n",
       "      <td>0.000592</td>\n",
       "      <td>0.017693</td>\n",
       "      <td>2.453151</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16368 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          frame_clock  x_galvo_uncaging  slm2packio  markpoints2packio  packio2slm  packio2markpoints  pycontrol_rsync   voltage\n",
       "139577       4.972792         -1.165180    3.329534           0.007827    0.000264           0.000592         0.017035 -0.116807\n",
       "140252       4.974765         -1.164851    3.325917           0.007827   -0.000394          -0.000394         0.019666 -0.196060\n",
       "140925       4.971806         -1.165180    3.337755           0.008156   -0.000065           0.000592         0.021310 -0.210858\n",
       "141595       4.970819         -1.164851    3.331507           0.007827    0.000592           0.000264         0.021310 -0.204939\n",
       "142267       4.975094         -1.166166    3.340715           0.006841    0.000264           0.001250         0.021639 -0.234206\n",
       "...               ...               ...         ...                ...         ...                ...              ...       ...\n",
       "11136216     4.974436         -1.165837    3.337426           0.006841   -0.000065           0.002565         0.021639  2.423554\n",
       "11136886     4.975751         -1.164851    3.334138           0.012102   -0.000065          -0.000065         0.017035  2.473211\n",
       "11137559     4.960953         -1.164851    3.337097           0.008485    0.000264           0.000921         0.019994  2.473211\n",
       "11138232     4.971477         -1.167153    3.319340           0.006183   -0.000065          -0.000065         0.005525  2.466963\n",
       "11138904     4.975751         -1.164851    3.329863           0.009471    0.000264           0.000592         0.017693  2.453151\n",
       "\n",
       "[16368 rows x 8 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trialobj.data.var"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d05f37ff",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Creating or Modifying AnnData arrays of trialobj\n",
    "\n",
    "There are a number of helper functions to create anndata arrays or modify existing anndata arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a92672cb",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>...</th>\n",
       "      <th>9995</th>\n",
       "      <th>9996</th>\n",
       "      <th>9997</th>\n",
       "      <th>9998</th>\n",
       "      <th>9999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.760647</td>\n",
       "      <td>0.110865</td>\n",
       "      <td>0.013329</td>\n",
       "      <td>0.935462</td>\n",
       "      <td>0.540991</td>\n",
       "      <td>...</td>\n",
       "      <td>0.473592</td>\n",
       "      <td>0.368700</td>\n",
       "      <td>0.200333</td>\n",
       "      <td>0.580795</td>\n",
       "      <td>0.397233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.971282</td>\n",
       "      <td>0.036780</td>\n",
       "      <td>0.315767</td>\n",
       "      <td>0.216254</td>\n",
       "      <td>0.759866</td>\n",
       "      <td>...</td>\n",
       "      <td>0.982392</td>\n",
       "      <td>0.137152</td>\n",
       "      <td>0.935467</td>\n",
       "      <td>0.262601</td>\n",
       "      <td>0.867271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.227014</td>\n",
       "      <td>0.163650</td>\n",
       "      <td>0.851788</td>\n",
       "      <td>0.527026</td>\n",
       "      <td>0.444399</td>\n",
       "      <td>...</td>\n",
       "      <td>0.996837</td>\n",
       "      <td>0.685767</td>\n",
       "      <td>0.307295</td>\n",
       "      <td>0.282857</td>\n",
       "      <td>0.553372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.054008</td>\n",
       "      <td>0.280003</td>\n",
       "      <td>0.651034</td>\n",
       "      <td>0.933380</td>\n",
       "      <td>0.087784</td>\n",
       "      <td>...</td>\n",
       "      <td>0.899018</td>\n",
       "      <td>0.389161</td>\n",
       "      <td>0.996816</td>\n",
       "      <td>0.672480</td>\n",
       "      <td>0.860496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.474105</td>\n",
       "      <td>0.987455</td>\n",
       "      <td>0.986814</td>\n",
       "      <td>0.977501</td>\n",
       "      <td>0.322008</td>\n",
       "      <td>...</td>\n",
       "      <td>0.571053</td>\n",
       "      <td>0.896681</td>\n",
       "      <td>0.143181</td>\n",
       "      <td>0.967625</td>\n",
       "      <td>0.332282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.473564</td>\n",
       "      <td>0.460252</td>\n",
       "      <td>0.806648</td>\n",
       "      <td>0.583812</td>\n",
       "      <td>0.419692</td>\n",
       "      <td>...</td>\n",
       "      <td>0.226740</td>\n",
       "      <td>0.973925</td>\n",
       "      <td>0.974531</td>\n",
       "      <td>0.315231</td>\n",
       "      <td>0.431784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.891266</td>\n",
       "      <td>0.953494</td>\n",
       "      <td>0.120490</td>\n",
       "      <td>0.178379</td>\n",
       "      <td>0.894506</td>\n",
       "      <td>...</td>\n",
       "      <td>0.089454</td>\n",
       "      <td>0.563263</td>\n",
       "      <td>0.897826</td>\n",
       "      <td>0.295088</td>\n",
       "      <td>0.194042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.829370</td>\n",
       "      <td>0.295575</td>\n",
       "      <td>0.703529</td>\n",
       "      <td>0.639097</td>\n",
       "      <td>0.606885</td>\n",
       "      <td>...</td>\n",
       "      <td>0.408049</td>\n",
       "      <td>0.901431</td>\n",
       "      <td>0.242319</td>\n",
       "      <td>0.211567</td>\n",
       "      <td>0.089038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.271850</td>\n",
       "      <td>0.935636</td>\n",
       "      <td>0.120800</td>\n",
       "      <td>0.487115</td>\n",
       "      <td>0.638711</td>\n",
       "      <td>...</td>\n",
       "      <td>0.700857</td>\n",
       "      <td>0.314190</td>\n",
       "      <td>0.338174</td>\n",
       "      <td>0.822562</td>\n",
       "      <td>0.709709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.486074</td>\n",
       "      <td>0.555504</td>\n",
       "      <td>0.725748</td>\n",
       "      <td>0.992619</td>\n",
       "      <td>0.433843</td>\n",
       "      <td>...</td>\n",
       "      <td>0.968497</td>\n",
       "      <td>0.225324</td>\n",
       "      <td>0.896016</td>\n",
       "      <td>0.659566</td>\n",
       "      <td>0.660780</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 10000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0         1         2         3         4     ...      9995      9996      9997      9998      9999\n",
       "0  0.760647  0.110865  0.013329  0.935462  0.540991  ...  0.473592  0.368700  0.200333  0.580795  0.397233\n",
       "1  0.971282  0.036780  0.315767  0.216254  0.759866  ...  0.982392  0.137152  0.935467  0.262601  0.867271\n",
       "2  0.227014  0.163650  0.851788  0.527026  0.444399  ...  0.996837  0.685767  0.307295  0.282857  0.553372\n",
       "3  0.054008  0.280003  0.651034  0.933380  0.087784  ...  0.899018  0.389161  0.996816  0.672480  0.860496\n",
       "4  0.474105  0.987455  0.986814  0.977501  0.322008  ...  0.571053  0.896681  0.143181  0.967625  0.332282\n",
       "5  0.473564  0.460252  0.806648  0.583812  0.419692  ...  0.226740  0.973925  0.974531  0.315231  0.431784\n",
       "6  0.891266  0.953494  0.120490  0.178379  0.894506  ...  0.089454  0.563263  0.897826  0.295088  0.194042\n",
       "7  0.829370  0.295575  0.703529  0.639097  0.606885  ...  0.408049  0.901431  0.242319  0.211567  0.089038\n",
       "8  0.271850  0.935636  0.120800  0.487115  0.638711  ...  0.700857  0.314190  0.338174  0.822562  0.709709\n",
       "9  0.486074  0.555504  0.725748  0.992619  0.433843  ...  0.968497  0.225324  0.896016  0.659566  0.660780\n",
       "\n",
       "[10 rows x 10000 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating new anndata object. This is identical to the base AnnData library.\n",
    "# the example below is from the Getting Started Tutorial for AnnData:\n",
    "\n",
    "# any given anndata object is created from constituent data arrays.\n",
    "\n",
    "\n",
    "# 1) Primary data matrix\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "n_rois, n_frames = 10, 10000\n",
    "X = np.random.random((n_rois, n_frames))  # create random data matrix\n",
    "\n",
    "df = pd.DataFrame(X, columns=range(n_frames), index=np.arange(n_rois, dtype=int).astype(str))\n",
    "df  # show the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f8368ee2",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>int</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>int</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>int</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>int</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>exc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  cell_type\n",
       "0       int\n",
       "1       exc\n",
       "2       exc\n",
       "3       exc\n",
       "4       exc\n",
       "5       int\n",
       "6       int\n",
       "7       int\n",
       "8       exc\n",
       "9       exc"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2) Observations matrix\n",
    "\n",
    "obs_meta = pd.DataFrame({\n",
    "    'cell_type': np.random.choice(['exc', 'int'], n_rois),\n",
    "},\n",
    "    index=np.arange(n_rois, dtype=int).astype(str),    # these are the same IDs of observations as above!\n",
    ")\n",
    "obs_meta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6f13a179",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>exp_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     exp_group\n",
       "0            A\n",
       "1            C\n",
       "2            B\n",
       "3            C\n",
       "4            B\n",
       "...        ...\n",
       "9995         B\n",
       "9996         C\n",
       "9997         C\n",
       "9998         A\n",
       "9999         A\n",
       "\n",
       "[10000 rows x 1 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3) Variables matrix\n",
    "\n",
    "\n",
    "var_meta = pd.DataFrame({\n",
    "    'exp_group': np.random.choice(['A','B', 'C'], n_frames),\n",
    "},\n",
    "    index=np.arange(n_frames, dtype=int).astype(str),    # these are the same IDs of observations as above!\n",
    ")\n",
    "var_meta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4841680c",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created AnnData object: \n",
      "\tAnnotated Data of n_obs (# ROIs) × n_vars (# Frames) = 10 × 10000\n",
      "Annotated Data of n_obs × n_vars = 10 × 10000 \n",
      "available attributes: \n",
      "\t.X (primary datamatrix)\n",
      "\t.obs (obs metadata): \n",
      "\t\t|- 'cell_type'\n",
      "\t.var (vars metadata): \n",
      "\t\t|- 'exp_group'\n"
     ]
    }
   ],
   "source": [
    "#4) Creating a new anndata attribute for the trialobj\n",
    "\n",
    "import imagingplus.processing.anndata as ad  # from the processing module, import anndata submodule\n",
    "\n",
    "trialobj.new_anndata = ad.AnnotatedData(X=df,obs=obs_meta, var=var_meta)\n",
    "\n",
    "print(trialobj.new_anndata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b16ec3e5",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Annotated Data of n_obs × n_vars = 10 × 10000 \n",
      "available attributes: \n",
      "\t.X (primary datamatrix)\n",
      "\t.obs (obs metadata): \n",
      "\t\t|- 'cell_type', 'cell_loc_x', 'cell_loc_y'\n",
      "\t.var (vars metadata): \n",
      "\t\t|- 'exp_group'\n"
     ]
    }
   ],
   "source": [
    "# adding an 'obs' to existing anndata object\n",
    "\n",
    "new_obs = pd.DataFrame({\n",
    "    'cell_loc_x': np.random.random_integers(0, 512, n_rois),\n",
    "    'cell_loc_y': np.random.random_integers(0, 512, n_rois),\n",
    "},\n",
    "    index=np.arange(n_rois, dtype=int).astype(str),    # these are the same IDs of observations as above!\n",
    ")\n",
    "\n",
    "cell_loc_x = np.random.random_integers(0, 512, n_rois)\n",
    "cell_loc_y = np.random.random_integers(0, 512, n_rois)\n",
    "\n",
    "\n",
    "trialobj.new_anndata.add_obs(obs_name='cell_loc_x', values=cell_loc_x)\n",
    "trialobj.new_anndata.add_obs(obs_name='cell_loc_y', values=cell_loc_y)\n",
    "\n",
    "print(trialobj.new_anndata)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "04a5a30d",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Annotated Data of n_obs × n_vars = 10 × 10000 \n",
      "available attributes: \n",
      "\t.X (primary datamatrix)\n",
      "\t.obs (obs metadata): \n",
      "\t\t|- 'cell_loc_x', 'cell_loc_y'\n",
      "\t.var (vars metadata): \n",
      "\t\t|- 'exp_group'\n"
     ]
    }
   ],
   "source": [
    "# deleting an 'obs' to existing anndata object\n",
    "# uses the pop method\n",
    "\n",
    "trialobj.new_anndata.del_obs('cell_type')\n",
    "print(trialobj.new_anndata)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c688f383",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "*Note: adding and deleting an 'var' to existing anndata object can be done in the exact same manner as demonstrated above for 'obs' using .add_var() and .del_var() methods on an anndata object.*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
